<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2015.2 (Build 540)" ts="2015-03-16 22:22:05">
<Class name="Data.Base.Entity">
<Super>%Persistent</Super>
<TimeChanged>63611,44290.858824</TimeChanged>
<TimeCreated>63610,79980.536971</TimeCreated>

<Property name="CreatedDate">
<Type>%DateTime</Type>
<Required>1</Required>
</Property>

<Property name="ModifiedDate">
<Type>%DateTime</Type>
<Required>1</Required>
</Property>

<Property name="IsActive">
<Type>%Boolean</Type>
<Required>1</Required>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Data.Base.EntityD</DataLocation>
<DefaultData>EntityDefaultData</DefaultData>
<IdLocation>^Data.Base.EntityD</IdLocation>
<IndexLocation>^Data.Base.EntityI</IndexLocation>
<StreamLocation>^Data.Base.EntityS</StreamLocation>
<Data name="EntityDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>CreatedDate</Value>
</Value>
<Value name="3">
<Value>ModifiedDate</Value>
</Value>
<Value name="4">
<Value>IsActive</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Data.Config">
<Super>Data.Base.Entity</Super>
<TimeChanged>63611,44269.646674</TimeChanged>
<TimeCreated>63610,79444.886551</TimeCreated>

<Property name="LoggingEnabled">
<Type>%Boolean</Type>
<Required>1</Required>
</Property>

<Property name="EnhancedKeywordProcessing">
<Type>%Boolean</Type>
<Required>1</Required>
</Property>

<Property name="MaxPagesToCrawl">
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Property name="MaxCrawlDepth">
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Property name="CrawlTimeoutSeconds">
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>ConfigDefaultData</DefaultData>
<Data name="ConfigDefaultData">
<Subscript>"Config"</Subscript>
<Value name="1">
<Value>LoggingEnabled</Value>
</Value>
<Value name="2">
<Value>EnhancedKeywordProcessing</Value>
</Value>
<Value name="3">
<Value>MaxPagesToCrawl</Value>
</Value>
<Value name="4">
<Value>MaxCrawlDepth</Value>
</Value>
<Value name="5">
<Value>CrawlTimeoutSeconds</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Data.CrawlingHistoryItem">
<Super>Data.Base.Entity</Super>
<TimeChanged>63611,45537.303607</TimeChanged>
<TimeCreated>63610,86227.669281</TimeCreated>

<Property name="SiteId">
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Property name="StardDate">
<Type>%DateTime</Type>
<Required>1</Required>
</Property>

<Property name="EndDate">
<Type>%DateTime</Type>
<Required>1</Required>
</Property>

<Property name="CrawledPagesCount">
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Property name="IsStopped">
<Type>%Boolean</Type>
<Required>1</Required>
</Property>

<ForeignKey name="SiteToCrawl">
<Properties>SiteId</Properties>
<ReferencedClass>Data.SiteToCrawl</ReferencedClass>
</ForeignKey>

<Method name="ClearAllHistory">
<ClassMethod>1</ClassMethod>
<Language>tsql</Language>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[	UPDATE Data.CrawlingHistoryItem SET IsActive = 0
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>CrawlingHistoryItemDefaultData</DefaultData>
<Data name="CrawlingHistoryItemDefaultData">
<Subscript>"CrawlingHistoryItem"</Subscript>
<Value name="1">
<Value>SiteId</Value>
</Value>
<Value name="2">
<Value>StardDate</Value>
</Value>
<Value name="3">
<Value>EndDate</Value>
</Value>
<Value name="4">
<Value>CrawledPagesCount</Value>
</Value>
<Value name="5">
<Value>IsStopped</Value>
</Value>
</Data>
</Storage>
</Class>


<Package name="Data" sqlname="Data"/>


<Class name="Data.SearchSettings">
<Super>Data.Base.Entity</Super>
<TimeChanged>63611,44277.610193</TimeChanged>
<TimeCreated>63610,79681.607063</TimeCreated>

<Property name="ResultsOnPage">
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>SearchSettingsDefaultData</DefaultData>
<Data name="SearchSettingsDefaultData">
<Subscript>"SearchSettings"</Subscript>
<Value name="1">
<Value>ResultsOnPage</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Data.SitePage">
<Super>%Persistent</Super>
<TimeChanged>63619,79590.560449</TimeChanged>
<TimeCreated>63581,84906.169887</TimeCreated>

<Property name="URL">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="Content">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100000"/>
</Property>

<Property name="Keywords">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="RecipeName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="SiteId">
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Property name="CreatedDate">
<Type>%DateTime</Type>
<Required>1</Required>
</Property>

<Property name="ModifiedDate">
<Type>%DateTime</Type>
<Required>1</Required>
</Property>

<ForeignKey name="SiteToCrawl">
<Properties>SiteId</Properties>
<ReferencedClass>Data.SiteToCrawl</ReferencedClass>
</ForeignKey>

<Index name="MainIDX">
<PrimaryKey>1</PrimaryKey>
<Properties>SiteId,URL</Properties>
</Index>

<Index name="KeywordsIDX">
<Properties>Keywords</Properties>
</Index>

<Method name="Upsert">
<ClassMethod>1</ClassMethod>
<FormalSpec>URL:%String(MAXLEN=255),Content:%String(MAXLEN=100000),RecipeName:%String(MAXLEN=100),Keywords:%String(MAXLEN=1000),SiteId:%Integer,ProcessKeywords:%Boolean</FormalSpec>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
	IF ProcessKeywords{
		set keywordsAnalyzed = ##class(iKnow.StringAnalyzer).GetEntitiesInText(Keywords)
	}		
	ELSE {
		set keywordsAnalyzed = Keywords
	}

	do ##class(Data.SitePage).UpsertSQL(URL, Content, RecipeName, keywordsAnalyzed, SiteId)
]]></Implementation>
</Method>

<Method name="UpsertSQL">
<ClassMethod>1</ClassMethod>
<FormalSpec>URL:%String(MAXLEN=255),Content:%String(MAXLEN=100000),RecipeName:%String(MAXLEN=100),Keywords:%String(MAXLEN=1000),SiteId:%Integer</FormalSpec>
<Language>tsql</Language>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
	IF EXISTS(SELECT * FROM SitePage WHERE URL = @URL AND SiteId = @SiteId) THEN BEGIN
		UPDATE SitePage SET Content = @Content, Keywords = @Keywords, RecipeName = @RecipeName, ModifiedDate = GETUTCDATE()
		WHERE URL = @URL AND SiteId = @SiteId;
END ELSE BEGIN
		INSERT INTO SitePage(SiteId, URL, Content, Keywords, RecipeName, CreatedDate, ModifiedDate) 
			VALUES(@SiteId, @URL, @Content, @Keywords, @RecipeName, GETUTCDATE(), GETUTCDATE());
END
]]></Implementation>
</Method>

<Method name="DeleteRecordsForSiteId">
<ClassMethod>1</ClassMethod>
<FormalSpec>SiteId:%Integer</FormalSpec>
<Language>tsql</Language>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[	DELETE FROM SitePage WHERE SiteID = @SiteId;
]]></Implementation>
</Method>

<Method name="DeleteSitesRecords">
<ClassMethod>1</ClassMethod>
<Language>tsql</Language>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[	DELETE FROM SitePage;
]]></Implementation>
</Method>

<Query name="GetRecordsBySiteId">
<Type>%SQLQuery</Type>
<SqlName>SitePage_GetRecordsBySiteId</SqlName>
<SqlProc>1</SqlProc>
<SqlQuery>SELECT SiteId AS SiteId, COUNT(*) AS PageCount
FROM SitePage
GROUP BY SiteId</SqlQuery>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="SELECTMODE" value="RUNTIME"/>
</Query>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Data.SitePageD</DataLocation>
<DefaultData>SitePageDefaultData</DefaultData>
<IdLocation>^Data.SitePageD</IdLocation>
<IndexLocation>^Data.SitePageI</IndexLocation>
<StreamLocation>^Data.SitePageS</StreamLocation>
<Data name="SitePageDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>URL</Value>
</Value>
<Value name="3">
<Value>Content</Value>
</Value>
<Value name="4">
<Value>Keywords</Value>
</Value>
<Value name="5">
<Value>SiteId</Value>
</Value>
<Value name="6">
<Value>CreatedDate</Value>
</Value>
<Value name="7">
<Value>ModifiedDate</Value>
</Value>
<Value name="8">
<Value>RecipeName</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Data.SiteToCrawl">
<Super>Data.Base.Entity</Super>
<TimeChanged>63619,69539.191074</TimeChanged>
<TimeCreated>63610,79732.940998</TimeCreated>

<Property name="Name">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="URL">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="ConfigId">
<Type>%Integer</Type>
</Property>

<Property name="ParserId">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<ForeignKey name="Config">
<Properties>ConfigId</Properties>
<ReferencedClass>Data.Config</ReferencedClass>
</ForeignKey>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>SiteToCrawlDefaultData</DefaultData>
<Data name="SiteToCrawlDefaultData">
<Subscript>"SiteToCrawl"</Subscript>
<Value name="1">
<Value>Name</Value>
</Value>
<Value name="2">
<Value>URL</Value>
</Value>
<Value name="3">
<Value>ConfigId</Value>
</Value>
<Value name="4">
<Value>ParserId</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Data.Utils.Seed">
<Super>%RegisteredObject</Super>
<TimeChanged>63619,78151.578958</TimeChanged>
<TimeCreated>63611,44219.144767</TimeCreated>

<Method name="Run">
<ClassMethod>1</ClassMethod>
<Language>tsql</Language>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
	// Seed crawler config
	IF NOT EXISTS(SELECT * FROM Data.Config) THEN BEGIN
		INSERT INTO Data.Config(LoggingEnabled, EnhancedKeywordProcessing, MaxPagesToCrawl, MaxCrawlDepth, CrawlTimeoutSeconds, IsActive, CreatedDate, ModifiedDate) 
		VALUES(0, 1, 10000, 10000, 0, 1, GETUTCDATE(), GETUTCDATE());
		
		DECLARE @ConfigId AS INT;
		SELECT TOP 1 @ConfigId = Id FROM Data.Config;

		// Seed sites to crawl		
		INSERT INTO Data.SiteToCrawl(Name, URL, ConfigId, ParserId, IsActive, CreatedDate, ModifiedDate) 
		VALUES('say7', 'http://www.say7.info/', @ConfigId, 'RecipeSchema', 1, GETUTCDATE(), GETUTCDATE());
		INSERT INTO Data.SiteToCrawl(Name, URL, ConfigId,ParserId, IsActive, CreatedDate, ModifiedDate) 
		VALUES('edimdoma', 'http://www.edimdoma.ru/', @ConfigId,'RecipeSchema', 1, GETUTCDATE(), GETUTCDATE());
		INSERT INTO Data.SiteToCrawl(Name, URL, ConfigId,ParserId, IsActive, CreatedDate, ModifiedDate) 
		VALUES('kedem', 'http://kedem.ru/', @ConfigId,'RecipeSchema', 1, GETUTCDATE(), GETUTCDATE());
		INSERT INTO Data.SiteToCrawl(Name, URL, ConfigId,ParserId, IsActive, CreatedDate, ModifiedDate) 
		VALUES('gotovim-doma', 'http://gotovim-doma.ru/', @ConfigId,'GotovimDoma', 1, GETUTCDATE(), GETUTCDATE());
		
		END
	
	// Delete crawling history
	DELETE FROM Data.CrawlingHistoryItem
	
	// Seed search settings
	IF NOT EXISTS(SELECT * FROM Data.SearchSettings) THEN BEGIN
		INSERT INTO Data.SearchSettings(ResultsOnPage, IsActive, CreatedDate, ModifiedDate) 
		VALUES(25, 1, GETUTCDATE(), GETUTCDATE());END
]]></Implementation>
</Method>
</Class>




<Class name="iKnow.StringAnalyzer">
<TimeChanged>63627,80340.38753</TimeChanged>
<TimeCreated>63610,80153.007685</TimeCreated>

<Method name="GetEntitiesInText">
<ClassMethod>1</ClassMethod>
<FormalSpec>text:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    set stemmer = ##class(%iKnow.Stemming.TextStemmer).%New("ru")
	return stemmer.StemWord(text)
]]></Implementation>
</Method>
</Class>


<Class name="Logging.LogRecord">
<Super>%Persistent</Super>
<TimeChanged>63611,46480.868979</TimeChanged>
<TimeCreated>63611,44722.841798</TimeCreated>

<Property name="Type">
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Property name="Description">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="Exception">
<Type>%String</Type>
<Parameter name="MAXLEN" value="2000"/>
</Property>

<Property name="CreatedDate">
<Type>%DateTime</Type>
<Required>1</Required>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Logging.LogRecordD</DataLocation>
<DefaultData>LogRecordDefaultData</DefaultData>
<IdLocation>^Logging.LogRecordD</IdLocation>
<IndexLocation>^Logging.LogRecordI</IndexLocation>
<StreamLocation>^Logging.LogRecordS</StreamLocation>
<Data name="LogRecordDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>MaxPagesToCrawl</Value>
</Value>
<Value name="3">
<Value>Description</Value>
</Value>
<Value name="4">
<Value>Exception</Value>
</Value>
<Value name="5">
<Value>CreatedDate</Value>
</Value>
<Value name="6">
<Value>Type</Value>
</Value>
</Data>
</Storage>
</Class>


<Package name="Logging" sqlname="Logging"/>


<Project name="RecipesSearch" LastModified="2015-03-16 22:18:27.506312">
  <Items>
    <ProjectItem name="Data" type="PKG"></ProjectItem>
    <ProjectItem name="Logging" type="PKG"></ProjectItem>
    <ProjectItem name="REST" type="PKG"></ProjectItem>
    <ProjectItem name="iKnow" type="PKG"></ProjectItem>
  </Items>
</Project>


<Class name="REST.iKnow">
<Super>%CSP.REST</Super>
<TimeChanged>63605,43018.414956</TimeChanged>
<TimeCreated>63584,64787.957361</TimeCreated>

<XData name="UrlMap">
<Data><![CDATA[
<Routes>
 <Route Url="/doSearch" Method="GET" Call="Search"/>
 </Routes>
]]></Data>
</XData>

<Method name="Search">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set query = %request.Get("query", "")
	set startIndex = %request.Get("startIndex", "0")
	set pageSize = %request.Get("pageSize", "25")
	
	try {
    	do ##class(REST.SearchEngine).SearchPages(query, startIndex, pageSize)
	} catch err {
    	write err.AsSystemError()
    }
		
	quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="REST.JSONSerializer">
<Super>%RegisteredObject</Super>
<TimeChanged>63598,45900.2243</TimeChanged>
<TimeCreated>63598,45900.2243</TimeCreated>

<Property name="Stream">
<Type>%Stream.GlobalCharacter</Type>
</Property>

<Property name="Pretty">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="Indent">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
<Private>1</Private>
</Property>

<Property name="Deep">
<Type>%Integer</Type>
<Private>1</Private>
</Property>

<Property name="Last">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Method name="SerialiseObject">
<FormalSpec>obj:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	// check if 'obj' is an object and get class name
	If '$IsObject(obj) Quit $$$ERROR($$$GeneralError, "Not an object instance.")
	
	// look at all the class properties
	Quit ..ObjectMembers(obj)
]]></Implementation>
</Method>

<Method name="Boolean">
<FormalSpec>bool:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If $IsValidNum(bool) {
		Quit ..Write($Select(bool:"true", 1:"false"))
	}
	Set bool=$ZConvert(bool, "L")
	Quit ..Write($Select(bool="true":"true", 1:"false"))
]]></Implementation>
</Method>

<Method name="Number">
<FormalSpec>num:%Numeric</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If num="" Quit ..Write("null")
	Quit ..Write($Number(num))
]]></Implementation>
</Method>

<Method name="String">
<FormalSpec>str:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If str="" Quit ..Write("null")
	Quit ..Write($Char(34)_..Escape(str)_$Char(34))
]]></Implementation>
</Method>

<Method name="StartObject">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit ..Start("{")
]]></Implementation>
</Method>

<Method name="NewMember">
<FormalSpec>str:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit ..New(str)
]]></Implementation>
</Method>

<Method name="EndObject">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit ..End("}")
]]></Implementation>
</Method>

<Method name="StartArray">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit ..Start("[")
]]></Implementation>
</Method>

<Method name="NewElement">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit ..New()
]]></Implementation>
</Method>

<Method name="EndArray">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit ..End("]")
]]></Implementation>
</Method>

<Method name="Start">
<FormalSpec>str</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If ..Pretty {
		If '((..Last=":") || (..Last=" ")) {
			If ..Indent Do ..Stream.WriteLine()
			Do ..Write($Justify("", ..Indent))
		}
		Quit ..Write(str_" ", 2)
	}
	Quit ..Write(str_" ")
]]></Implementation>
</Method>

<Method name="New">
<FormalSpec>str</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If '((..Last="{") || (..Last="[")) Do ..Write(", ")
	If ..Pretty {
		Do ..Stream.WriteLine()
		Do ..Write($Justify("", ..Indent))
	}
	If $Data(str) {
		Do ..String(str)
		Quit ..Write(": ")
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="End">
<FormalSpec>str</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If ..Pretty {
		Do ..WriteLine("", -2)
		Quit ..Write($Justify("", ..Indent)_str)
	}
	Quit ..Write(" "_str)
]]></Implementation>
</Method>

<Method name="Write">
<FormalSpec>str:%String,ind:%Integer</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set ..Last=$Extract(str, $Length(str)-1)
	If $Data(ind) Set ..Indent=..Indent+ind
	Quit ..Stream.Write(str)
]]></Implementation>
</Method>

<Method name="WriteLine">
<FormalSpec>str:%String,ind:%Integer</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set ..Last=$Extract(str, $Length(str)-1)
	If $Data(ind) Set ..Indent=..Indent+ind
	Quit ..Stream.WriteLine(str)
]]></Implementation>
</Method>

<Method name="Escape">
<FormalSpec>str:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	/*
		http://www.json.org/
	
		" - quotation mark (34)
		b - backspace (8)
		f - formfeed (12)
		n - newline (10)
		r - carriage return (13)
		t - horizontal tab (9)
	*/
	For list="\\", "//", $C(34)_$C(34), $C(8)_"b", $C(12)_"f", $C(10)_"n", $C(13)_"r", $C(9)_"t" {
		While (str'="") && (str[$Extract(list)) {
			Set str=$Piece(str, $Extract(list))_$Char(2,3)_$Piece(str, $Extract(list), 2, 999)
		}
		If str[$Char(3) Set str=$Translate(str, $Char(2, 3), "\"_$Extract(list, 2))
	}
	
	// return 'escaped' value
	Quit str
]]></Implementation>
</Method>

<Method name="ObjectMembers">
<FormalSpec>obj:%RegisteredObject,key:%String=""</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	// [Documentation] > [Development Guides] > [Using Cache Objects] > [Class Definition Classes]
	// http://docs.intersystems.com/cache20102/csp/docbook/DocBook.UI.Page.cls?KEY=GOBJ_classdef
	
	// check stream size
	If ..Stream.Size>1048576 Quit $$$ERROR($$$GeneralError, "Stream is too large (over a MB).")

	// start a JSON object
	Do ..StartObject()
	
	// define the fully qualified class name
	Set classname=obj.%ClassName(1)

	// output object id if a persistent class
	// (class types: persistent, serial, stream, datatype)
	Set type=##class(%Dictionary.CompiledClass).%OpenId(classname).ClassType
	If type="persistent" {
		Set id=obj.%Id()
		Do ..NewMember("ID")
		Do $Case($IsValidNum(id), 1:..Number(id), :..String(id))
	}

	// new JSON object member (if collection)
	If $Length(key) {
		Do ..NewMember(obj.%ClassName()_"_Key")
		Do $Case($IsValidNum(key), 1:..Number(key), :..String(key))
	}
	
	// instantiate the relevant class definition object
	Set cdef=##class(%Dictionary.ClassDefinition).%OpenId(classname)

	// work through the class properties
	Set count = cdef.Properties.Count()
	For i=1:1:count {
		
		// define property object
		Set prop=cdef.Properties.GetAt(i)
		
		// create a new object member
		Do ..NewMember(prop.Name)
		
		// get property value
		Set value=$Property(obj, prop.Name)
		
		// collection property?
		Do $Case(prop.Collection, 
			"list": ..ListCollection(obj, prop, value),
			"array": ..ArrayCollection(obj, prop, value),
			: ..ObjectProperty(obj, prop, value))
		
	}
	
	// end a JSON object
	Do ..EndObject()
	
	// end of method
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="ListCollection">
<FormalSpec>obj:%RegisteredObject,prop:%RegisteredObject,value:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	// only start array if values present
	Set count=value.Count()
	If count {
	
		// start a JSON array
		Do ..StartArray()
	
		// work through array
		For i=1:1:count {
		
			// start new array element
			Do ..NewElement()

			// get the array entry
			Set entry=$Method(value, "GetAt", i)
		
			// output property value
			Do ..ObjectProperty(obj, prop, entry)
		
		}

		// end a JSON array
		Do ..EndArray()
		
	}
	
	// end of method
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="ArrayCollection">
<FormalSpec>obj:%RegisteredObject,prop:%RegisteredObject,value:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	// only start array if values present
	Set key=$Method(value, "Next", "")
	If key'="" {
	
		// start a JSON array
		Do ..StartArray()
	
		// work through array
		While key'="" {
		
			// start new array element
			Do ..NewElement()

			// get the array entry
			Set entry=$Method(value, "GetAt", key)
		
			// output property value
			Do ..ObjectProperty(obj, prop, entry, key)
		
			// read next key
			Set key=$Method(value, "Next", key)
			
		}

		// end a JSON array
		Do ..EndArray()
		
	}
	
	// end of method
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="ObjectProperty">
<FormalSpec>obj:%RegisteredObject,prop:%RegisteredObject,value:%CacheString,key:%String=""</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	// recurse if property value is an object
	If $IsObject(value) {
		Quit ..ObjectMembers(value, key)
	}
	
	// not an object, so get data type
	Set type=prop.Type
	
	// TODO: how do we test for LogicalToDisplay method on 'datatype' class properly?
	If $Extract(type)="%", $Piece(type, ".")'="%Library" Set $Extract(type)="%Library."
	Set mdef=##class(%Dictionary.MethodDefinition).%OpenId(type_"||LogicalToDisplay")
	If type'["Integer", $IsObject(mdef) Set value=$Method(obj, prop.Name_"LogicalToDisplay", value)
	
	// output data type value
	Quit $Case(type, 
		"%Library.Boolean": ..Boolean(value), 
		"%Library.Integer": ..Number(value),
		"%Library.Numeric": ..Number(value),
		"%Library.Float": ..Number(value),
		"%Library.Double": ..Number(value),
		"%Library.Currency": ..Number(value),
		: ..String(value))
]]></Implementation>
</Method>
</Class>


<Class name="REST.KeywordProcessResult">
<Super>%RegisteredObject</Super>
<TimeChanged>63598,70105.310223</TimeChanged>
<TimeCreated>63598,41194.381073</TimeCreated>

<Property name="Keywords">
<Type>%String</Type>
</Property>
</Class>


<Class name="REST.KeywordsProcessor">
<Super>%RegisteredObject</Super>
<TimeChanged>63601,71442.471948</TimeChanged>
<TimeCreated>63598,70110.477535</TimeCreated>

<Method name="GetProccessedKeyword">
<ClassMethod>1</ClassMethod>
<FormalSpec>keywords:%String</FormalSpec>
<Implementation><![CDATA[
	set result = ##class(REST.KeywordProcessResult).%New()
	
	// TODO: add processing
	set result.Keywords = keywords
	
	do ##class(%ZEN.Auxiliary.jsonProvider).%ObjectToJSON(result)
]]></Implementation>
</Method>
</Class>




<Class name="REST.SearchEngine">
<Super>%RegisteredObject</Super>
<TimeChanged>63619,79401.929242</TimeChanged>
<TimeCreated>63598,70157.596857</TimeCreated>

<Method name="SearchPages">
<ClassMethod>1</ClassMethod>
<FormalSpec>query:%String,startIndex:%Integer,pageSize:%Integer</FormalSpec>
<Implementation><![CDATA[
	// TODO: Implement real pagination
	set sqlQuery = "SELECT %NOLOCK TOP "_pageSize_" Content,Keywords,SiteId,URL,RecipeName,CreatedDate, ModifiedDate"
	_" FROM Data.SitePage"
	
	set queryParts =  ##class(iKnow.StringAnalyzer).GetEntitiesInText(query)
	
	set queryParts = $LISTFROMSTRING(queryParts, " ")
	
	set predicate = ""
	set i = 1
	set listLength = $LISTLENGTH(queryParts) - 1
	while (i <= listLength){
		
		if i '= 1{
			set predicate = predicate_" AND "
		}
		
		set predicate = predicate_"(Keywords [ '"_$LIST(queryParts, i)_"')"
		
		set i = i + 1
	}
	
	set sqlQuery = sqlQuery_" WHERE "_predicate
	
	//write sqlQuery
	
	do ##class(%ZEN.Auxiliary.jsonSQLProvider).%WriteJSONFromSQL(,sqlQuery)
]]></Implementation>
</Method>
</Class>
</Export>
