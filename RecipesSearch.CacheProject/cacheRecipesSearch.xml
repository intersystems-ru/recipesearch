<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2015.1 (Build 220)" ts="2015-02-15 14:43:51">
<Project name="RecipesSearch" LastModified="2015-02-15 13:08:53.266868" Target="##class(RecipesSearch.SitePage).Upsert(&quot;123&quot;, 2343333333333333333333333333333333333333333333333333333333333333333333333333333333333&quot;, &quot;&quot;,1)" TargetType="0">
  <Items>
    <ProjectItem name="REST" type="PKG"></ProjectItem>
    <ProjectItem name="RecipesSearch.SitePage" type="CLS"></ProjectItem>
  </Items>
</Project>


<Class name="RecipesSearch.SitePage">
<Super>%Persistent</Super>
<TimeChanged>63598,52301.443772</TimeChanged>
<TimeCreated>63581,84906.169887</TimeCreated>

<Property name="URL">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="Content">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100000"/>
</Property>

<Property name="Keywords">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="SiteId">
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Property name="CreatedDate">
<Type>%DateTime</Type>
<Required>1</Required>
</Property>

<Property name="ModifiedDate">
<Type>%DateTime</Type>
<Required>1</Required>
</Property>

<Index name="MainIDX">
<PrimaryKey>1</PrimaryKey>
<Properties>SiteId,URL</Properties>
</Index>

<Method name="Upsert">
<ClassMethod>1</ClassMethod>
<FormalSpec>URL:%String(MAXLEN=255),Content:%String(MAXLEN=100000),Keywords:%String(MAXLEN=1000),SiteId:%Integer</FormalSpec>
<Language>tsql</Language>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
	IF EXISTS(SELECT * FROM RecipesSearch.SitePage WHERE URL = @URL AND SiteId = @SiteId) THEN BEGIN
		UPDATE RecipesSearch.SitePage SET Content = @Content, Keywords = @Keywords, ModifiedDate = GETUTCDATE()
		WHERE URL = @URL AND SiteId = @SiteId;
	END ELSE BEGIN
		INSERT INTO RecipesSearch.SitePage(SiteId, URL, Content, Keywords, CreatedDate, ModifiedDate) 
			VALUES(@SiteId, @URL, @Content, @Keywords, GETUTCDATE(), GETUTCDATE());
	END
]]></Implementation>
</Method>

<Method name="DeleteRecordsForSiteId">
<ClassMethod>1</ClassMethod>
<FormalSpec>SiteId:%Integer</FormalSpec>
<Language>tsql</Language>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[	DELETE FROM RecipesSearch.SitePage WHERE SiteID = @SiteId;
]]></Implementation>
</Method>

<Method name="DeleteSitesRecords">
<ClassMethod>1</ClassMethod>
<Language>tsql</Language>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[	DELETE FROM RecipesSearch.SitePage;
]]></Implementation>
</Method>

<Query name="GetRecords">
<Type>%SQLQuery</Type>
<FormalSpec>query:%String(MAXLEN=1000)</FormalSpec>
<SqlName>SitePage_GetRecords</SqlName>
<SqlProc>1</SqlProc>
<SqlQuery>SELECT TOP 25 :query, Content,Keywords,SiteId,URL,CreatedDate, ModifiedDate
FROM SitePage
WHERE Content LIKE :query</SqlQuery>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="SELECTMODE" value="RUNTIME"/>
</Query>

<Query name="GetRecordsBySiteId">
<Type>%SQLQuery</Type>
<SqlName>SitePage_GetRecordsBySiteId</SqlName>
<SqlProc>1</SqlProc>
<SqlQuery>SELECT SiteId AS SiteId, COUNT(*) AS PageCount
FROM SitePage
GROUP BY SiteId</SqlQuery>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="SELECTMODE" value="RUNTIME"/>
</Query>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^RecipesSearch.SitePageD</DataLocation>
<DefaultData>SitePageDefaultData</DefaultData>
<IdLocation>^RecipesSearch.SitePageD</IdLocation>
<IndexLocation>^RecipesSearch.SitePageI</IndexLocation>
<StreamLocation>^RecipesSearch.SitePageS</StreamLocation>
<Data name="SitePageDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>URL</Value>
</Value>
<Value name="3">
<Value>Content</Value>
</Value>
<Value name="4">
<Value>Keyword</Value>
</Value>
<Value name="5">
<Value>SiteId</Value>
</Value>
<Value name="6">
<Value>CreatedDate</Value>
</Value>
<Value name="7">
<Value>ModifiedDate</Value>
</Value>
<Value name="8">
<Value>Keywords</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="REST.iKnow">
<Super>%CSP.REST</Super>
<TimeChanged>63598,50259.284014</TimeChanged>
<TimeCreated>63584,64787.957361</TimeCreated>

<XData name="UrlMap">
<Data><![CDATA[
<Routes>
 <Route Url="/processKeywords" Method="GET" Call="ProcessKeyword"/>
 </Routes>
]]></Data>
</XData>

<Method name="ProcessKeyword">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set keywords = %request.Get("keywords", "")
	try {
    	do ##class(REST.KeywordProcessResult).GetProccessedKeyword(keywords)
	} catch err {
    	write err.AsSystemError()
    }
		
	quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="REST.JSONSerializer">
<Super>%RegisteredObject</Super>
<TimeChanged>63598,45900.2243</TimeChanged>
<TimeCreated>63598,45900.2243</TimeCreated>

<Property name="Stream">
<Type>%Stream.GlobalCharacter</Type>
</Property>

<Property name="Pretty">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="Indent">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
<Private>1</Private>
</Property>

<Property name="Deep">
<Type>%Integer</Type>
<Private>1</Private>
</Property>

<Property name="Last">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Method name="SerialiseObject">
<FormalSpec>obj:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	// check if 'obj' is an object and get class name
	If '$IsObject(obj) Quit $$$ERROR($$$GeneralError, "Not an object instance.")
	
	// look at all the class properties
	Quit ..ObjectMembers(obj)
]]></Implementation>
</Method>

<Method name="Boolean">
<FormalSpec>bool:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If $IsValidNum(bool) {
		Quit ..Write($Select(bool:"true", 1:"false"))
	}
	Set bool=$ZConvert(bool, "L")
	Quit ..Write($Select(bool="true":"true", 1:"false"))
]]></Implementation>
</Method>

<Method name="Number">
<FormalSpec>num:%Numeric</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If num="" Quit ..Write("null")
	Quit ..Write($Number(num))
]]></Implementation>
</Method>

<Method name="String">
<FormalSpec>str:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If str="" Quit ..Write("null")
	Quit ..Write($Char(34)_..Escape(str)_$Char(34))
]]></Implementation>
</Method>

<Method name="StartObject">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit ..Start("{")
]]></Implementation>
</Method>

<Method name="NewMember">
<FormalSpec>str:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit ..New(str)
]]></Implementation>
</Method>

<Method name="EndObject">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit ..End("}")
]]></Implementation>
</Method>

<Method name="StartArray">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit ..Start("[")
]]></Implementation>
</Method>

<Method name="NewElement">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit ..New()
]]></Implementation>
</Method>

<Method name="EndArray">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit ..End("]")
]]></Implementation>
</Method>

<Method name="Start">
<FormalSpec>str</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If ..Pretty {
		If '((..Last=":") || (..Last=" ")) {
			If ..Indent Do ..Stream.WriteLine()
			Do ..Write($Justify("", ..Indent))
		}
		Quit ..Write(str_" ", 2)
	}
	Quit ..Write(str_" ")
]]></Implementation>
</Method>

<Method name="New">
<FormalSpec>str</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If '((..Last="{") || (..Last="[")) Do ..Write(", ")
	If ..Pretty {
		Do ..Stream.WriteLine()
		Do ..Write($Justify("", ..Indent))
	}
	If $Data(str) {
		Do ..String(str)
		Quit ..Write(": ")
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="End">
<FormalSpec>str</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If ..Pretty {
		Do ..WriteLine("", -2)
		Quit ..Write($Justify("", ..Indent)_str)
	}
	Quit ..Write(" "_str)
]]></Implementation>
</Method>

<Method name="Write">
<FormalSpec>str:%String,ind:%Integer</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set ..Last=$Extract(str, $Length(str)-1)
	If $Data(ind) Set ..Indent=..Indent+ind
	Quit ..Stream.Write(str)
]]></Implementation>
</Method>

<Method name="WriteLine">
<FormalSpec>str:%String,ind:%Integer</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set ..Last=$Extract(str, $Length(str)-1)
	If $Data(ind) Set ..Indent=..Indent+ind
	Quit ..Stream.WriteLine(str)
]]></Implementation>
</Method>

<Method name="Escape">
<FormalSpec>str:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	/*
		http://www.json.org/
	
		" - quotation mark (34)
		b - backspace (8)
		f - formfeed (12)
		n - newline (10)
		r - carriage return (13)
		t - horizontal tab (9)
	*/
	For list="\\", "//", $C(34)_$C(34), $C(8)_"b", $C(12)_"f", $C(10)_"n", $C(13)_"r", $C(9)_"t" {
		While (str'="") && (str[$Extract(list)) {
			Set str=$Piece(str, $Extract(list))_$Char(2,3)_$Piece(str, $Extract(list), 2, 999)
		}
		If str[$Char(3) Set str=$Translate(str, $Char(2, 3), "\"_$Extract(list, 2))
	}
	
	// return 'escaped' value
	Quit str
]]></Implementation>
</Method>

<Method name="ObjectMembers">
<FormalSpec>obj:%RegisteredObject,key:%String=""</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	// [Documentation] > [Development Guides] > [Using Cache Objects] > [Class Definition Classes]
	// http://docs.intersystems.com/cache20102/csp/docbook/DocBook.UI.Page.cls?KEY=GOBJ_classdef
	
	// check stream size
	If ..Stream.Size>1048576 Quit $$$ERROR($$$GeneralError, "Stream is too large (over a MB).")

	// start a JSON object
	Do ..StartObject()
	
	// define the fully qualified class name
	Set classname=obj.%ClassName(1)

	// output object id if a persistent class
	// (class types: persistent, serial, stream, datatype)
	Set type=##class(%Dictionary.CompiledClass).%OpenId(classname).ClassType
	If type="persistent" {
		Set id=obj.%Id()
		Do ..NewMember("ID")
		Do $Case($IsValidNum(id), 1:..Number(id), :..String(id))
	}

	// new JSON object member (if collection)
	If $Length(key) {
		Do ..NewMember(obj.%ClassName()_"_Key")
		Do $Case($IsValidNum(key), 1:..Number(key), :..String(key))
	}
	
	// instantiate the relevant class definition object
	Set cdef=##class(%Dictionary.ClassDefinition).%OpenId(classname)

	// work through the class properties
	Set count = cdef.Properties.Count()
	For i=1:1:count {
		
		// define property object
		Set prop=cdef.Properties.GetAt(i)
		
		// create a new object member
		Do ..NewMember(prop.Name)
		
		// get property value
		Set value=$Property(obj, prop.Name)
		
		// collection property?
		Do $Case(prop.Collection, 
			"list": ..ListCollection(obj, prop, value),
			"array": ..ArrayCollection(obj, prop, value),
			: ..ObjectProperty(obj, prop, value))
		
	}
	
	// end a JSON object
	Do ..EndObject()
	
	// end of method
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="ListCollection">
<FormalSpec>obj:%RegisteredObject,prop:%RegisteredObject,value:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	// only start array if values present
	Set count=value.Count()
	If count {
	
		// start a JSON array
		Do ..StartArray()
	
		// work through array
		For i=1:1:count {
		
			// start new array element
			Do ..NewElement()

			// get the array entry
			Set entry=$Method(value, "GetAt", i)
		
			// output property value
			Do ..ObjectProperty(obj, prop, entry)
		
		}

		// end a JSON array
		Do ..EndArray()
		
	}
	
	// end of method
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="ArrayCollection">
<FormalSpec>obj:%RegisteredObject,prop:%RegisteredObject,value:%CacheString</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	// only start array if values present
	Set key=$Method(value, "Next", "")
	If key'="" {
	
		// start a JSON array
		Do ..StartArray()
	
		// work through array
		While key'="" {
		
			// start new array element
			Do ..NewElement()

			// get the array entry
			Set entry=$Method(value, "GetAt", key)
		
			// output property value
			Do ..ObjectProperty(obj, prop, entry, key)
		
			// read next key
			Set key=$Method(value, "Next", key)
			
		}

		// end a JSON array
		Do ..EndArray()
		
	}
	
	// end of method
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="ObjectProperty">
<FormalSpec>obj:%RegisteredObject,prop:%RegisteredObject,value:%CacheString,key:%String=""</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	// recurse if property value is an object
	If $IsObject(value) {
		Quit ..ObjectMembers(value, key)
	}
	
	// not an object, so get data type
	Set type=prop.Type
	
	// TODO: how do we test for LogicalToDisplay method on 'datatype' class properly?
	If $Extract(type)="%", $Piece(type, ".")'="%Library" Set $Extract(type)="%Library."
	Set mdef=##class(%Dictionary.MethodDefinition).%OpenId(type_"||LogicalToDisplay")
	If type'["Integer", $IsObject(mdef) Set value=$Method(obj, prop.Name_"LogicalToDisplay", value)
	
	// output data type value
	Quit $Case(type, 
		"%Library.Boolean": ..Boolean(value), 
		"%Library.Integer": ..Number(value),
		"%Library.Numeric": ..Number(value),
		"%Library.Float": ..Number(value),
		"%Library.Double": ..Number(value),
		"%Library.Currency": ..Number(value),
		: ..String(value))
]]></Implementation>
</Method>
</Class>


<Class name="REST.KeywordProcessResult">
<Super>%RegisteredObject</Super>
<TimeChanged>63598,50244.147252</TimeChanged>
<TimeCreated>63598,41194.381073</TimeCreated>

<Property name="Keywords">
<Type>%String</Type>
</Property>

<Method name="GetProccessedKeyword">
<ClassMethod>1</ClassMethod>
<FormalSpec>keywords:%String</FormalSpec>
<Implementation><![CDATA[
	set result = ##class(REST.KeywordProcessResult).%New()
	
	// TODO: add processing
	set result.Keywords = keywords
	
	set json = ##class(REST.JSONSerializer).%New()
	
	do json.SerialiseObject(result)
	do json.Stream.OutputToDevice()
]]></Implementation>
</Method>
</Class>


</Export>
