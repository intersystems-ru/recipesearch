<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2015.2 (Build 563U)" ts="2015-02-22 15:16:54">
<Class name="REST.KeywordsProcessor">
<Super>%RegisteredObject</Super>
<TimeChanged>63601,71442.471948</TimeChanged>
<TimeCreated>63598,70110.477535</TimeCreated>

<Method name="GetProccessedKeyword">
<ClassMethod>1</ClassMethod>
<FormalSpec>keywords:%String</FormalSpec>
<Implementation><![CDATA[
	set result = ##class(REST.KeywordProcessResult).%New()
	
	// TODO: add processing
	set result.Keywords = keywords
	
	do ##class(%ZEN.Auxiliary.jsonProvider).%ObjectToJSON(result)
]]></Implementation>
</Method>
</Class>




<Class name="REST.SearchEngine">
<Super>%RegisteredObject</Super>
<TimeChanged>63605,54276.938317</TimeChanged>
<TimeCreated>63598,70157.596857</TimeCreated>

<Method name="SearchPages">
<ClassMethod>1</ClassMethod>
<FormalSpec>query:%String,startIndex:%Integer,pageSize:%Integer</FormalSpec>
<Implementation><![CDATA[
	// TODO: Implement real pagination
	set sqlQuery = "SELECT %NOLOCK TOP "_pageSize_" Content,Keywords,SiteId,URL,CreatedDate, ModifiedDate"
	_" FROM RecipesSearch.SitePage"
	
	set queryParts =  ##class(RecipesSearch.StringAnalyzer).GetEntitiesInText(query)
	
	set queryParts = $LISTFROMSTRING(queryParts, " ")
	
	set predicate = ""
	set i = 1
	set listLength = $LISTLENGTH(queryParts) - 1
	while (i <= listLength){
		
		if i '= 1{
			set predicate = predicate_" AND "
		}
		
		set predicate = predicate_"(Keywords [ '"_$LIST(queryParts, i)_"')"
		
		set i = i + 1
	}
	
	set sqlQuery = sqlQuery_" WHERE "_predicate
	
	//write sqlQuery
	
	do ##class(%ZEN.Auxiliary.jsonSQLProvider).%WriteJSONFromSQL(,sqlQuery)
]]></Implementation>
</Method>
</Class>


<Class name="REST.iKnow">
<Super>%CSP.REST</Super>
<TimeChanged>63605,43018.414956</TimeChanged>
<TimeCreated>63584,64787.957361</TimeCreated>

<XData name="UrlMap">
<Data><![CDATA[
<Routes>
 <Route Url="/doSearch" Method="GET" Call="Search"/>
 </Routes>
]]></Data>
</XData>

<Method name="Search">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set query = %request.Get("query", "")
	set startIndex = %request.Get("startIndex", "0")
	set pageSize = %request.Get("pageSize", "25")
	
	try {
    	do ##class(REST.SearchEngine).SearchPages(query, startIndex, pageSize)
	} catch err {
    	write err.AsSystemError()
    }
		
	quit $$$OK
]]></Implementation>
</Method>
</Class>


<Project name="RecipesSearch" LastModified="2015-02-22 12:01:35.49715" Target="##class(RecipesSearch.SitePage).Upsert(&quot;123&quot;, 2343333333333333333333333333333333333333333333333333333333333333333333333333333333333&quot;, &quot;&quot;,1)" TargetType="0">
  <Items>
    <ProjectItem name="REST" type="PKG"></ProjectItem>
    <ProjectItem name="RecipesSearch.SitePage" type="CLS"></ProjectItem>
    <ProjectItem name="RecipesSearch.StringAnalyzer" type="CLS"></ProjectItem>
  </Items>
</Project>


<Class name="RecipesSearch.SitePage">
<Super>%Persistent</Super>
<TimeChanged>63605,45964.599095</TimeChanged>
<TimeCreated>63581,84906.169887</TimeCreated>

<Property name="URL">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="Content">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100000"/>
</Property>

<Property name="Keywords">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="SiteId">
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Property name="CreatedDate">
<Type>%DateTime</Type>
<Required>1</Required>
</Property>

<Property name="ModifiedDate">
<Type>%DateTime</Type>
<Required>1</Required>
</Property>

<Index name="MainIDX">
<PrimaryKey>1</PrimaryKey>
<Properties>SiteId,URL</Properties>
</Index>

<Index name="KeywordsIDX">
<Properties>Keywords</Properties>
</Index>

<Method name="Upsert">
<ClassMethod>1</ClassMethod>
<FormalSpec>URL:%String(MAXLEN=255),Content:%String(MAXLEN=100000),Keywords:%String(MAXLEN=1000),SiteId:%Integer,ProcessKeywords:%Boolean</FormalSpec>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
	IF ProcessKeywords{
		set keywordsAnalyzed = ##class(RecipesSearch.StringAnalyzer).GetEntitiesInText(Keywords)
	}		
	ELSE {
		set keywordsAnalyzed = Keywords
	}

	do ##class(RecipesSearch.SitePage).UpsertSQL(URL, Content, keywordsAnalyzed, SiteId)
]]></Implementation>
</Method>

<Method name="UpsertSQL">
<ClassMethod>1</ClassMethod>
<FormalSpec>URL:%String(MAXLEN=255),Content:%String(MAXLEN=100000),Keywords:%String(MAXLEN=1000),SiteId:%Integer</FormalSpec>
<Language>tsql</Language>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
	IF EXISTS(SELECT * FROM RecipesSearch.SitePage WHERE URL = @URL AND SiteId = @SiteId) THEN BEGIN
		UPDATE RecipesSearch.SitePage SET Content = @Content, Keywords = @Keywords, ModifiedDate = GETUTCDATE()
		WHERE URL = @URL AND SiteId = @SiteId;
END ELSE BEGIN
		INSERT INTO RecipesSearch.SitePage(SiteId, URL, Content, Keywords, CreatedDate, ModifiedDate) 
			VALUES(@SiteId, @URL, @Content, @Keywords, GETUTCDATE(), GETUTCDATE());
END
]]></Implementation>
</Method>

<Method name="DeleteRecordsForSiteId">
<ClassMethod>1</ClassMethod>
<FormalSpec>SiteId:%Integer</FormalSpec>
<Language>tsql</Language>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[	DELETE FROM RecipesSearch.SitePage WHERE SiteID = @SiteId;
]]></Implementation>
</Method>

<Method name="DeleteSitesRecords">
<ClassMethod>1</ClassMethod>
<Language>tsql</Language>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[	DELETE FROM RecipesSearch.SitePage;
]]></Implementation>
</Method>

<Query name="GetRecordsBySiteId">
<Type>%SQLQuery</Type>
<SqlName>SitePage_GetRecordsBySiteId</SqlName>
<SqlProc>1</SqlProc>
<SqlQuery>SELECT SiteId AS SiteId, COUNT(*) AS PageCount
FROM SitePage
GROUP BY SiteId</SqlQuery>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="SELECTMODE" value="RUNTIME"/>
</Query>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^RecipesSearch.SitePageD</DataLocation>
<DefaultData>SitePageDefaultData</DefaultData>
<IdLocation>^RecipesSearch.SitePageD</IdLocation>
<IndexLocation>^RecipesSearch.SitePageI</IndexLocation>
<StreamLocation>^RecipesSearch.SitePageS</StreamLocation>
<Data name="SitePageDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>URL</Value>
</Value>
<Value name="3">
<Value>Content</Value>
</Value>
<Value name="4">
<Value>Keyword</Value>
</Value>
<Value name="5">
<Value>SiteId</Value>
</Value>
<Value name="6">
<Value>CreatedDate</Value>
</Value>
<Value name="7">
<Value>ModifiedDate</Value>
</Value>
<Value name="8">
<Value>Keywords</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="RecipesSearch.StringAnalyzer">
<TimeChanged>63605,42142.792914</TimeChanged>
<TimeCreated>63605,42142.792914</TimeCreated>

<Method name="GetEntitiesInText">
<ClassMethod>1</ClassMethod>
<FormalSpec>text:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        set dname = "RecipesDomain"
    if (##class(%iKnow.Domain).Exists(dname)) {
           set domoref=##class(%iKnow.Domain).Open(dname)
           set stat=domoref.DropData()
           if 'stat {
                   write "DropData error ",$System.Status.DisplayError(stat)
                   quit
           }
    } else {
           set domoref=##class(%iKnow.Domain).%New(dname)
           do domoref.%Save()
        }
       
        set domId=domoref.Id
             
        set myloader = ##class(%iKnow.Source.Loader).%New(domId)
        do myloader.BufferSource("ref", text)
        do myloader.ProcessBuffer()
       
        do ##class(%iKnow.Queries.EntityAPI).GetTop(.result,domId,1,50)
                 
        set i=1
        set result = ""
        while $data(result(i)) {
           set liststr = $listtostring(result(i))
           set str = $Piece(liststr, ",", 2)
           set result = str_" "_result
       set i=i+1
    }
    return result
]]></Implementation>
</Method>
</Class>
</Export>
