<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2015.2 (Build 540)" ts="2015-03-16 21:55:29">
<Class name="Data.Base.Entity">
<Super>%Persistent</Super>
<TimeChanged>63611,44290.858824</TimeChanged>
<TimeCreated>63610,79980.536971</TimeCreated>

<Property name="CreatedDate">
<Type>%DateTime</Type>
<Required>1</Required>
</Property>

<Property name="ModifiedDate">
<Type>%DateTime</Type>
<Required>1</Required>
</Property>

<Property name="IsActive">
<Type>%Boolean</Type>
<Required>1</Required>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Data.Base.EntityD</DataLocation>
<DefaultData>EntityDefaultData</DefaultData>
<IdLocation>^Data.Base.EntityD</IdLocation>
<IndexLocation>^Data.Base.EntityI</IndexLocation>
<StreamLocation>^Data.Base.EntityS</StreamLocation>
<Data name="EntityDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>CreatedDate</Value>
</Value>
<Value name="3">
<Value>ModifiedDate</Value>
</Value>
<Value name="4">
<Value>IsActive</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Data.Config">
<Super>Data.Base.Entity</Super>
<TimeChanged>63611,44269.646674</TimeChanged>
<TimeCreated>63610,79444.886551</TimeCreated>

<Property name="LoggingEnabled">
<Type>%Boolean</Type>
<Required>1</Required>
</Property>

<Property name="EnhancedKeywordProcessing">
<Type>%Boolean</Type>
<Required>1</Required>
</Property>

<Property name="MaxPagesToCrawl">
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Property name="MaxCrawlDepth">
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Property name="CrawlTimeoutSeconds">
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>ConfigDefaultData</DefaultData>
<Data name="ConfigDefaultData">
<Subscript>"Config"</Subscript>
<Value name="1">
<Value>LoggingEnabled</Value>
</Value>
<Value name="2">
<Value>EnhancedKeywordProcessing</Value>
</Value>
<Value name="3">
<Value>MaxPagesToCrawl</Value>
</Value>
<Value name="4">
<Value>MaxCrawlDepth</Value>
</Value>
<Value name="5">
<Value>CrawlTimeoutSeconds</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Data.CrawlingHistoryItem">
<Super>Data.Base.Entity</Super>
<TimeChanged>63611,45537.303607</TimeChanged>
<TimeCreated>63610,86227.669281</TimeCreated>

<Property name="SiteId">
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Property name="StardDate">
<Type>%DateTime</Type>
<Required>1</Required>
</Property>

<Property name="EndDate">
<Type>%DateTime</Type>
<Required>1</Required>
</Property>

<Property name="CrawledPagesCount">
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Property name="IsStopped">
<Type>%Boolean</Type>
<Required>1</Required>
</Property>

<ForeignKey name="SiteToCrawl">
<Properties>SiteId</Properties>
<ReferencedClass>Data.SiteToCrawl</ReferencedClass>
</ForeignKey>

<Method name="ClearAllHistory">
<ClassMethod>1</ClassMethod>
<Language>tsql</Language>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[	UPDATE Data.CrawlingHistoryItem SET IsActive = 0
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>CrawlingHistoryItemDefaultData</DefaultData>
<Data name="CrawlingHistoryItemDefaultData">
<Subscript>"CrawlingHistoryItem"</Subscript>
<Value name="1">
<Value>SiteId</Value>
</Value>
<Value name="2">
<Value>StardDate</Value>
</Value>
<Value name="3">
<Value>EndDate</Value>
</Value>
<Value name="4">
<Value>CrawledPagesCount</Value>
</Value>
<Value name="5">
<Value>IsStopped</Value>
</Value>
</Data>
</Storage>
</Class>


<Package name="Data" sqlname="Data"/>


<Class name="Data.SearchSettings">
<Super>Data.Base.Entity</Super>
<TimeChanged>63611,44277.610193</TimeChanged>
<TimeCreated>63610,79681.607063</TimeCreated>

<Property name="ResultsOnPage">
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>SearchSettingsDefaultData</DefaultData>
<Data name="SearchSettingsDefaultData">
<Subscript>"SearchSettings"</Subscript>
<Value name="1">
<Value>ResultsOnPage</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Data.SitePage">
<Super>%Persistent</Super>
<TimeChanged>63619,79590.560449</TimeChanged>
<TimeCreated>63581,84906.169887</TimeCreated>

<Property name="URL">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="Content">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100000"/>
</Property>

<Property name="Keywords">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="RecipeName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="SiteId">
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Property name="CreatedDate">
<Type>%DateTime</Type>
<Required>1</Required>
</Property>

<Property name="ModifiedDate">
<Type>%DateTime</Type>
<Required>1</Required>
</Property>

<ForeignKey name="SiteToCrawl">
<Properties>SiteId</Properties>
<ReferencedClass>Data.SiteToCrawl</ReferencedClass>
</ForeignKey>

<Index name="MainIDX">
<PrimaryKey>1</PrimaryKey>
<Properties>SiteId,URL</Properties>
</Index>

<Index name="KeywordsIDX">
<Properties>Keywords</Properties>
</Index>

<Method name="Upsert">
<ClassMethod>1</ClassMethod>
<FormalSpec>URL:%String(MAXLEN=255),Content:%String(MAXLEN=100000),RecipeName:%String(MAXLEN=100),Keywords:%String(MAXLEN=1000),SiteId:%Integer,ProcessKeywords:%Boolean</FormalSpec>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
	IF ProcessKeywords{
		set keywordsAnalyzed = ##class(iKnow.StringAnalyzer).GetEntitiesInText(Keywords)
	}		
	ELSE {
		set keywordsAnalyzed = Keywords
	}

	do ##class(Data.SitePage).UpsertSQL(URL, Content, RecipeName, keywordsAnalyzed, SiteId)
]]></Implementation>
</Method>

<Method name="UpsertSQL">
<ClassMethod>1</ClassMethod>
<FormalSpec>URL:%String(MAXLEN=255),Content:%String(MAXLEN=100000),RecipeName:%String(MAXLEN=100),Keywords:%String(MAXLEN=1000),SiteId:%Integer</FormalSpec>
<Language>tsql</Language>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
	IF EXISTS(SELECT * FROM SitePage WHERE URL = @URL AND SiteId = @SiteId) THEN BEGIN
		UPDATE SitePage SET Content = @Content, Keywords = @Keywords, RecipeName = @RecipeName, ModifiedDate = GETUTCDATE()
		WHERE URL = @URL AND SiteId = @SiteId;
END ELSE BEGIN
		INSERT INTO SitePage(SiteId, URL, Content, Keywords, RecipeName, CreatedDate, ModifiedDate) 
			VALUES(@SiteId, @URL, @Content, @Keywords, @RecipeName, GETUTCDATE(), GETUTCDATE());
END
]]></Implementation>
</Method>

<Method name="DeleteRecordsForSiteId">
<ClassMethod>1</ClassMethod>
<FormalSpec>SiteId:%Integer</FormalSpec>
<Language>tsql</Language>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[	DELETE FROM SitePage WHERE SiteID = @SiteId;
]]></Implementation>
</Method>

<Method name="DeleteSitesRecords">
<ClassMethod>1</ClassMethod>
<Language>tsql</Language>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[	DELETE FROM SitePage;
]]></Implementation>
</Method>

<Query name="GetRecordsBySiteId">
<Type>%SQLQuery</Type>
<SqlName>SitePage_GetRecordsBySiteId</SqlName>
<SqlProc>1</SqlProc>
<SqlQuery>SELECT SiteId AS SiteId, COUNT(*) AS PageCount
FROM SitePage
GROUP BY SiteId</SqlQuery>
<Parameter name="CONTAINID" value="1"/>
<Parameter name="SELECTMODE" value="RUNTIME"/>
</Query>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Data.SitePageD</DataLocation>
<DefaultData>SitePageDefaultData</DefaultData>
<IdLocation>^Data.SitePageD</IdLocation>
<IndexLocation>^Data.SitePageI</IndexLocation>
<StreamLocation>^Data.SitePageS</StreamLocation>
<Data name="SitePageDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>URL</Value>
</Value>
<Value name="3">
<Value>Content</Value>
</Value>
<Value name="4">
<Value>Keywords</Value>
</Value>
<Value name="5">
<Value>SiteId</Value>
</Value>
<Value name="6">
<Value>CreatedDate</Value>
</Value>
<Value name="7">
<Value>ModifiedDate</Value>
</Value>
<Value name="8">
<Value>RecipeName</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Data.SiteToCrawl">
<Super>Data.Base.Entity</Super>
<TimeChanged>63619,69539.191074</TimeChanged>
<TimeCreated>63610,79732.940998</TimeCreated>

<Property name="Name">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="URL">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="ConfigId">
<Type>%Integer</Type>
</Property>

<Property name="ParserId">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<ForeignKey name="Config">
<Properties>ConfigId</Properties>
<ReferencedClass>Data.Config</ReferencedClass>
</ForeignKey>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>SiteToCrawlDefaultData</DefaultData>
<Data name="SiteToCrawlDefaultData">
<Subscript>"SiteToCrawl"</Subscript>
<Value name="1">
<Value>Name</Value>
</Value>
<Value name="2">
<Value>URL</Value>
</Value>
<Value name="3">
<Value>ConfigId</Value>
</Value>
<Value name="4">
<Value>ParserId</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Data.Utils.Seed">
<Super>%RegisteredObject</Super>
<TimeChanged>63619,78151.578958</TimeChanged>
<TimeCreated>63611,44219.144767</TimeCreated>

<Method name="Run">
<ClassMethod>1</ClassMethod>
<Language>tsql</Language>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
	// Seed crawler config
	IF NOT EXISTS(SELECT * FROM Data.Config) THEN BEGIN
		INSERT INTO Data.Config(LoggingEnabled, EnhancedKeywordProcessing, MaxPagesToCrawl, MaxCrawlDepth, CrawlTimeoutSeconds, IsActive, CreatedDate, ModifiedDate) 
		VALUES(0, 1, 10000, 10000, 0, 1, GETUTCDATE(), GETUTCDATE());
		
		DECLARE @ConfigId AS INT;
		SELECT TOP 1 @ConfigId = Id FROM Data.Config;

		// Seed sites to crawl		
		INSERT INTO Data.SiteToCrawl(Name, URL, ConfigId, ParserId, IsActive, CreatedDate, ModifiedDate) 
		VALUES('say7', 'http://www.say7.info/', @ConfigId, 'RecipeSchema', 1, GETUTCDATE(), GETUTCDATE());
		INSERT INTO Data.SiteToCrawl(Name, URL, ConfigId,ParserId, IsActive, CreatedDate, ModifiedDate) 
		VALUES('edimdoma', 'http://www.edimdoma.ru/', @ConfigId,'RecipeSchema', 1, GETUTCDATE(), GETUTCDATE());
		INSERT INTO Data.SiteToCrawl(Name, URL, ConfigId,ParserId, IsActive, CreatedDate, ModifiedDate) 
		VALUES('kedem', 'http://kedem.ru/', @ConfigId,'RecipeSchema', 1, GETUTCDATE(), GETUTCDATE());
		INSERT INTO Data.SiteToCrawl(Name, URL, ConfigId,ParserId, IsActive, CreatedDate, ModifiedDate) 
		VALUES('gotovim-doma', 'http://gotovim-doma.ru/', @ConfigId,'GotovimDoma', 1, GETUTCDATE(), GETUTCDATE());
		
		END
	
	// Delete crawling history
	DELETE FROM Data.CrawlingHistoryItem
	
	// Seed search settings
	IF NOT EXISTS(SELECT * FROM Data.SearchSettings) THEN BEGIN
		INSERT INTO Data.SearchSettings(ResultsOnPage, IsActive, CreatedDate, ModifiedDate) 
		VALUES(25, 1, GETUTCDATE(), GETUTCDATE());END
]]></Implementation>
</Method>
</Class>




<Class name="iKnow.StringAnalyzer">
<TimeChanged>63610,80153.007685</TimeChanged>
<TimeCreated>63610,80153.007685</TimeCreated>

<Method name="GetEntitiesInText">
<ClassMethod>1</ClassMethod>
<FormalSpec>text:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
        set dname = "RecipesDomain"
    if (##class(%iKnow.Domain).Exists(dname)) {
           set domoref=##class(%iKnow.Domain).Open(dname)
           set stat=domoref.DropData()
           if 'stat {
                   write "DropData error ",$System.Status.DisplayError(stat)
                   quit
           }
    } else {
           set domoref=##class(%iKnow.Domain).%New(dname)
           do domoref.%Save()
        }
       
        set domId=domoref.Id
             
        set myloader = ##class(%iKnow.Source.Loader).%New(domId)
        do myloader.BufferSource("ref", text)
        do myloader.ProcessBuffer()
       
        do ##class(%iKnow.Queries.EntityAPI).GetTop(.result,domId,1,50)
                 
        set i=1
        set result = ""
        while $data(result(i)) {
           set liststr = $listtostring(result(i))
           set str = $Piece(liststr, ",", 2)
           set result = str_" "_result
       set i=i+1
    }
    return result
]]></Implementation>
</Method>
</Class>


<Class name="Logging.LogRecord">
<Super>%Persistent</Super>
<TimeChanged>63611,46480.868979</TimeChanged>
<TimeCreated>63611,44722.841798</TimeCreated>

<Property name="Type">
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Property name="Description">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="Exception">
<Type>%String</Type>
<Parameter name="MAXLEN" value="2000"/>
</Property>

<Property name="CreatedDate">
<Type>%DateTime</Type>
<Required>1</Required>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Logging.LogRecordD</DataLocation>
<DefaultData>LogRecordDefaultData</DefaultData>
<IdLocation>^Logging.LogRecordD</IdLocation>
<IndexLocation>^Logging.LogRecordI</IndexLocation>
<StreamLocation>^Logging.LogRecordS</StreamLocation>
<Data name="LogRecordDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>MaxPagesToCrawl</Value>
</Value>
<Value name="3">
<Value>Description</Value>
</Value>
<Value name="4">
<Value>Exception</Value>
</Value>
<Value name="5">
<Value>CreatedDate</Value>
</Value>
<Value name="6">
<Value>Type</Value>
</Value>
</Data>
</Storage>
</Class>


<Package name="Logging" sqlname="Logging"/>


<Project name="RecipesSearch" LastModified="2015-03-16 21:52:18.02229">
  <Items>
    <ProjectItem name="Data" type="PKG"></ProjectItem>
    <ProjectItem name="Logging" type="PKG"></ProjectItem>
    <ProjectItem name="REST" type="PKG"></ProjectItem>
    <ProjectItem name="iKnow" type="PKG"></ProjectItem>
  </Items>
</Project>


<Class name="REST.iKnow">
<Super>%CSP.REST</Super>
<TimeChanged>63627,76491.955747</TimeChanged>
<TimeCreated>63584,64787.957361</TimeCreated>

<XData name="UrlMap">
<Data><![CDATA[
<Routes>
 <Route Url="/doSearch" Method="GET" Call="Search"/>
 </Routes>
]]></Data>
</XData>

<Method name="Search">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set query = %request.Get("query", "")
	set pageNumber = %request.Get("pageNumber", "1")
	set pageSize = %request.Get("pageSize", "25")
	
	try {
    	do ##class(REST.SearchEngine).SearchPages(query, pageNumber, pageSize)
	} catch err {
    	write err.AsSystemError()
    }
		
	quit $$$OK
]]></Implementation>
</Method>
</Class>




<Class name="REST.Search.SearchResult">
<Super>%RegisteredObject</Super>
<TimeChanged>63627,76763.925557</TimeChanged>
<TimeCreated>63627,74813.171587</TimeCreated>

<Property name="Items">
<Type>Data.SitePage</Type>
<Collection>list</Collection>
</Property>

<Property name="TotalCount">
<Type>%Integer</Type>
</Property>

<Property name="PageNumber">
<Type>%Integer</Type>
</Property>

<Method name="PopulateFromResultSet">
<ClassMethod>1</ClassMethod>
<FormalSpec>result:%Library.ResultSet,pageNumber:%Integer,pageSize:%Integer</FormalSpec>
<ReturnType>%Library.ResultSet</ReturnType>
<Implementation><![CDATA[
	
	// TODO: make it more performant
	set startIndex = (pageNumber - 1) * pageSize + 1
	
	set searchResults = ##class(REST.Search.SearchResult).%New()
	set searchResults.Items = ##class(%ListOfObjects).%New()
	
	set count = 0
    while (result.Next()) 
    { 
    	set count = count + 1 
		continue:(count < startIndex) 
        
        if (count >= (startIndex + pageSize)) 
        {  
			continue
        } 
        
        set sitePage = ##class(Data.SitePage).%New() 
        set sitePage.Content = result.Data("Content") 
        set sitePage.SiteId = result.Data("SiteId") 
        set sitePage.URL = result.Data("URL") 
        set sitePage.Keywords = result.Data("Keywords") 
        set sitePage.ModifiedDate = result.Data("ModifiedDate") 
        set sitePage.CreatedDate = result.Data("CreatedDate") 
        set sitePage.RecipeName = result.Data("RecipeName") 
        
        set tSC = searchResults.Items.Insert(sitePage) 
        
	}
    
   	set searchResults.PageNumber = pageNumber
	set searchResults.TotalCount = count
	
	return searchResults
]]></Implementation>
</Method>
</Class>


<Class name="REST.SearchEngine">
<Super>%RegisteredObject</Super>
<TimeChanged>63627,76472.625477</TimeChanged>
<TimeCreated>63598,70157.596857</TimeCreated>

<Method name="SearchPages">
<ClassMethod>1</ClassMethod>
<FormalSpec>query:%String,pageNumber:%Integer,pageSize:%Integer</FormalSpec>
<Implementation><![CDATA[
	// TODO: Implement real pagination
	set sqlQuery = "SELECT %NOLOCK Content,Keywords,SiteId,URL,RecipeName,CreatedDate, ModifiedDate"
	_" FROM Data.SitePage"
	
	set queryParts =  ##class(iKnow.StringAnalyzer).GetEntitiesInText(query)
	
	set queryParts = $LISTFROMSTRING(queryParts, " ")
	
	set predicate = ""
	set i = 1
	set listLength = $LISTLENGTH(queryParts) - 1
	while (i <= listLength){
		
		if i '= 1{
			set predicate = predicate_" AND "
		}
		
		set predicate = predicate_"(Keywords [ '"_$LIST(queryParts, i)_"')"
		
		set i = i + 1
	}
	
	set sqlQuery = sqlQuery_" WHERE "_predicate_" ORDER BY URL, SiteId"
		
	set result = ##class(%Library.ResultSet).%New() 
	set tSC = result.Prepare(sqlQuery) 
    set tSC = result.Execute()
     
    set searchResult = ##class(REST.Search.SearchResult).PopulateFromResultSet(result, pageNumber, pageSize)           

	do ##class(%ZEN.Auxiliary.jsonProvider).%ObjectToJSON(searchResult)
]]></Implementation>
</Method>
</Class>
</Export>
