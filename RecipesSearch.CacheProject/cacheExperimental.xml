<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2015.2 (Build 540)" ts="2015-04-12 18:29:55">
<Class name="Experimental.PageAnalyzer">
<Super>%Persistent</Super>
<TimeChanged>63654,66543.487326</TimeChanged>
<TimeCreated>63612,49594.660203</TimeCreated>

<Method name="GetAllEntities">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#sqlcompile SELECT = odbc
	&sql(declare byall cursor for
	      select RecipeInstructions
          from Data.SitePage)
    &sql(open byall)
	set dname = "RecipesDomain"
    if (##class(%iKnow.Domain).Exists(dname)) {
	   set domoref=##class(%iKnow.Domain).Open(dname)
	   set stat=domoref.DropData()
	   if 'stat {
		   write "DropData error ",$System.Status.DisplayError(stat)
		   quit
	   } 
    } else { 
	   set domoref=##class(%iKnow.Domain).%New(dname)
	   do domoref.%Save()
	}
        
	set domId=domoref.Id
	if ##class(%iKnow.Configuration).Exists("RecipesConfig") {
       set cfg=##class(%iKnow.Configuration).Open("RecipesConfig")
    } else {
	   set cfg=##class(%iKnow.Configuration).%New("RecipesConfig",0,$LISTBUILD("ru"),"",1)
	   do cfg.%Save()
	}
     	     
	set mylister=##class(%iKnow.Source.File.Lister).%New(domId)
	do mylister.Init("RecipesConfig")
	set myloader = ##class(%iKnow.Source.Loader).%New(domId)
	set stat = myloader.SetLister(mylister)		
	set file=##class(%File).%New("C:\temp\page.txt")
	do file.Open("WSN")
	set cnt = 1
	for {
	   &sql(fetch byall into :RecipeInstructions)
	   quit:(SQLCODE '= 0)
	   set recipesList = $LISTFROMSTRING(RecipeInstructions, " ")
	   
	   set i = 1
	   while i <= $listlength(recipesList) {
		   set stemmedWord = ##class(Experimental.TextAnalyzer).StemText($list(recipesList,i))
		   do file.Write(stemmedWord)
		   do file.WriteLine(".")
	       set i = i + 1
	   }	 	   
	   set cnt = cnt + 1	   
	}
	do file.Close()
    set dirpath="C:\temp"
    set stat = myloader.ProcessList(dirpath,"txt")
     
    do ##class(%iKnow.Queries.EntityAPI).GetTop(.result,domId,1,10000)
    
    set fileOutput=##class(%File).%New("C:\temp\Dictionary\dict.txt")
    do fileOutput.Open("WSN")
      		 
  	set i=1
  	while $data(result(i)) {
	   do fileOutput.WriteLine($listtostring(result(i),",",1))
       set i=i+1
       write "i="_i
    }
    do fileOutput.Close()
     
    if SQLCODE = 100 { set status = $$$OK}
    else { set status = $$$ERROR($$$GeneralError, "SQLCODE: "_SQLCODE)}
    return status
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Experimental.PageAnalyzerD</DataLocation>
<DefaultData>PageAnalyzerDefaultData</DefaultData>
<IdLocation>^Experimental.PageAnalyzerD</IdLocation>
<IndexLocation>^Experimental.PageAnalyzerI</IndexLocation>
<StreamLocation>^Experimental.PageAnalyzerS</StreamLocation>
<Data name="PageAnalyzerDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Project name="Experimental" LastModified="2015-04-10 18:36:12.114042">
  <Items>
    <ProjectItem name="Experimental.PageAnalyzer" type="CLS"></ProjectItem>
    <ProjectItem name="Experimental.TextAnalyzer" type="CLS"></ProjectItem>
  </Items>
</Project>


<Class name="Experimental.TextAnalyzer">
<Super>%Persistent</Super>
<TimeChanged>63654,66567.207028</TimeChanged>
<TimeCreated>63612,49650.300759</TimeCreated>

<Method name="GetEntitiesInText">
<ClassMethod>1</ClassMethod>
<FormalSpec>text:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#Include %IKPublic
	
	set cfgname = "Russian"
	if ##class(%iKnow.Configuration).Exists(cfgname) {
       set cfg=##class(%iKnow.Configuration).Open(cfgname)
    } else {
	   set cfg=##class(%iKnow.Configuration).%New(cfgname,0,$LISTBUILD("ru"),"",1)
	   set cfg.StemmingConfig = "DEFAULT"
	   do cfg.%Save()
	}

    set dname = "RecipesAnalyzer"
    if (##class(%iKnow.Domain).Exists(dname)) {
	    set domoref=##class(%iKnow.Domain).Open(dname)
        set stat=domoref.DropData()
        if 'stat {
           write "DropData error ",$System.Status.DisplayError(stat)
           quit
        }
    } else {
        set domoref=##class(%iKnow.Domain).%New(dname)
        do domoref.SetParameter($$$IKPSTEMMING,1) 
        do domoref.SetParameter($$$IKPDEFAULTCONFIG,cfgname)
        do domoref.%Save()
    }
       
    set domId=domoref.Id
    
    set stemmer = ##class(%iKnow.Stemming.TextStemmer).%New("ru")
	set stemmedText = ##class(Experimental.TextAnalyzer).StemText(text)
             
    set myloader = ##class(%iKnow.Source.Loader).%New(domId)
    do myloader.BufferSource("ref", stemmedText)
    do myloader.ProcessBuffer()
       
    do ##class(%iKnow.Queries.EntityAPI).GetTop(.result,domId,1,50)
                 
    set i=1
    set result = ""
    while $data(result(i)) {
       set liststr = $listtostring(result(i))
       write liststr,!
       set str = $Piece(liststr, ",", 2)
       set result = str_" "_result
       set i=i+1
    }
    return result
]]></Implementation>
</Method>

<Method name="StemText">
<ClassMethod>1</ClassMethod>
<FormalSpec>text:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set stemmer = ##class(%iKnow.Stemming.TextStemmer).%New("ru")
	return stemmer.StemWord(text)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Experimental.TextAnalyzerD</DataLocation>
<DefaultData>TextAnalyzerDefaultData</DefaultData>
<IdLocation>^Experimental.TextAnalyzerD</IdLocation>
<IndexLocation>^Experimental.TextAnalyzerI</IndexLocation>
<StreamLocation>^Experimental.TextAnalyzerS</StreamLocation>
<Data name="TextAnalyzerDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
