<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2015.2 (Build 540)" ts="2015-11-20 19:38:10">
<Class name="Experimental.PageAnalyzer">
<Super>%Persistent</Super>
<TimeChanged>63876,61718</TimeChanged>
<TimeCreated>63612,49594.660203</TimeCreated>

<Method name="GetAllEntities">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#sqlcompile SELECT = odbc
	&sql(declare byall cursor for
	      select RecipeInstructions
          from Data.SitePage)
    &sql(open byall)
	set dname = "RecipesDomain"
    if (##class(%iKnow.Domain).Exists(dname)) {
	   set domoref=##class(%iKnow.Domain).Open(dname)
	   set stat=domoref.DropData()
	   if 'stat {
		   write "DropData error ",$System.Status.DisplayError(stat)
		   quit
	   } 
    } else { 
	   set domoref=##class(%iKnow.Domain).%New(dname)
	   do domoref.%Save()
	}
        
	set domId=domoref.Id
	if ##class(%iKnow.Configuration).Exists("RecipesConfig") {
       set cfg=##class(%iKnow.Configuration).Open("RecipesConfig")
    } else {
	   set cfg=##class(%iKnow.Configuration).%New("RecipesConfig",0,$LISTBUILD("ru"),"",1)
	   do cfg.%Save()
	}
     	     
	set mylister=##class(%iKnow.Source.File.Lister).%New(domId)
	do mylister.Init("RecipesConfig")
	set myloader = ##class(%iKnow.Source.Loader).%New(domId)
	set stat = myloader.SetLister(mylister)		
	set file=##class(%File).%New("C:\temp\page.txt")
	do file.Open("WSN")
	set cnt = 1
	for {
	   &sql(fetch byall into :RecipeInstructions)
	   quit:(SQLCODE '= 0)
	   set recipesList = $LISTFROMSTRING(RecipeInstructions, " ")
	   
	   set i = 1
	   while i <= $listlength(recipesList) {
		   set stemmedWord = ##class(Experimental.TextAnalyzer).StemText($list(recipesList,i))
		   do file.Write(stemmedWord)
		   do file.WriteLine(".")
	       set i = i + 1
	   }	 	   
	   set cnt = cnt + 1	   
	}
	do file.Close()
    set dirpath="C:\temp"
    set stat = myloader.ProcessList(dirpath,"txt")
     
    do ##class(%iKnow.Queries.EntityAPI).GetTop(.result,domId,1,10000)
    
    set fileOutput=##class(%File).%New("C:\temp\Dictionary\dict.txt")
    do fileOutput.Open("WSN")
      		 
  	set i=1
  	while $data(result(i)) {
	   do fileOutput.WriteLine($listtostring(result(i),",",1))
       set i=i+1
       write "i="_i
    }
    do fileOutput.Close()
     
    if SQLCODE = 100 { set status = $$$OK}
    else { set status = $$$ERROR($$$GeneralError, "SQLCODE: "_SQLCODE)}
    return status
]]></Implementation>
</Method>

<Method name="GetAllEntitiesFromSQL">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#sqlcompile SELECT = odbc
	set dname = "RecipesDomain"
    if (##class(%iKnow.Domain).Exists(dname)) {
	   set domoref=##class(%iKnow.Domain).Open(dname)
	   set stat=domoref.DropData()
	   if 'stat {
		   write "DropData error ",$System.Status.DisplayError(stat)
		   quit
	   } 
    } else { 
	   set domoref=##class(%iKnow.Domain).%New(dname)
	   do domoref.%Save()
	}
        
	set domId=domoref.Id
	if ##class(%iKnow.Configuration).Exists("RecipesConfig") {
       set cfg=##class(%iKnow.Configuration).Open("RecipesConfig")
    } else {
	   set cfg=##class(%iKnow.Configuration).%New("RecipesConfig",0,$LISTBUILD("ru"),"",1)
	   do cfg.%Save()
	}
    set processor = "%iKnow.Source.Temp.Processor"
    set pparams = $LB("CP1251") 
    set flister = ##class(%iKnow.Source.SQL.Lister).%New(domId)
    do flister.Init("RecipesConfig", processor, pparams)
    set myloader=##class(%iKnow.Source.Loader).%New(domId)
    
    set myquery = "SELECT ID,SiteId,RecipeName,Ingredients,RecipeInstructions FROM Data.SitePage"
    set idfld = "ID"
    set grpfld = "SiteId"
    set dataflds = $LB("RecipeName","Ingredients","RecipeInstructions")
    set metaflds = $LB("SiteId")
    set metakeys = $LB("SiteId")
    
    set stat=flister.AddListToBatch(myquery,idfld,grpfld,dataflds,metaflds,metakeys,0)
    if stat '= 1 {
	    write "The lister failed: ", $System.Status.DisplayError(stat)
	    quit
    }
    
    set stat=myloader.ProcessBatch()
    if stat '= 1 {
	    write "The loader failed: ", $System.Status.DisplayError(stat)
	    quit
    }
    
    do ##class(%iKnow.Queries.EntityAPI).GetTop(.result,domId,1,30000)
    
    set fileOutput=##class(%File).%New("C:\temp\Dictionary\dict.txt")
    do fileOutput.Open("WSN")
      		 
  	set i=1
  	while $data(result(i)) {
	   do fileOutput.WriteLine($listtostring(result(i),",",1))
       set i = i + 1
    }
    do fileOutput.Close()

    return stat
]]></Implementation>
</Method>

<Method name="WriteGlobalToFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>pathToDictionary:%String</FormalSpec>
<Implementation><![CDATA[
	set fileOutput=##class(%File).%New(pathToDictionary)
    do fileOutput.Open("WSN")
    set key = $Order(^allDict(""))
	   while key '= "" {
		   do fileOutput.WriteLine(key)
		   set key = $Order(^allDict(key))
	   }
    do fileOutput.Close()
]]></Implementation>
</Method>

<Method name="ReadDictionaryToGlobal">
<ClassMethod>1</ClassMethod>
<FormalSpec>pathToDictionary:%String</FormalSpec>
<Implementation><![CDATA[
	kill ^allDict
	set fileInput=##class(%File).%New(pathToDictionary)
    do fileInput.Open("RS")
    set word = fileInput.ReadLine()
    while word '= "" {
	    set ^allDict(word) = 1
	    set word = fileInput.ReadLine()
    }
    do fileInput.Close()
]]></Implementation>
</Method>

<Method name="AddWordsToGlobal">
<ClassMethod>1</ClassMethod>
<FormalSpec>words:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set wordsStemmed = ##class(Experimental.TextAnalyzer).StemText(words)
	set wordList = $LISTFROMSTRING(wordsStemmed, " ")
	for i=1:1:$listlength(wordList) {
		set curWord = $list(wordList,i)
		set inDictionary = $GET(^allDict(curWord))
		if inDictionary '= "" {
			set curFrequency = $GET(^tempWords(curWord))
			if curFrequency '= "" {
				set ^tempWords(curWord) = curFrequency + 1
			} else {
				set ^tempWords(curWord) = 1
			}
		}
	}
]]></Implementation>
</Method>

<Method name="CountTfIdf">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	kill ^documentFrequency
	kill ^tempWords
	kill ^tf
	kill ^maxtf
	#sqlcompile SELECT = odbc
	&sql(declare byalldata cursor for
	      select ID,Keywords, RecipeName, Ingredients, RecipeInstructions
          from Data.SitePage)
    &sql(open byalldata)
    set numberOfDocuments = 0
    for {
	   &sql(fetch byalldata into :curID,:Keywords,:RecipeName,:Ingredients,:RecipeInstructions)
	   quit:(SQLCODE '= 0)
	   set numberOfDocuments = numberOfDocuments + 1 
	   do ##class(Experimental.PageAnalyzer).AddWordsToGlobal(Keywords)
	   do ##class(Experimental.PageAnalyzer).AddWordsToGlobal(RecipeName)
	   do ##class(Experimental.PageAnalyzer).AddWordsToGlobal(Ingredients)
	   do ##class(Experimental.PageAnalyzer).AddWordsToGlobal(RecipeInstructions)

	   set termFrequency = ""
	   set maxFrequency = 0
	   set key = $Order(^tempWords(""))
	   while key '= "" {
		   set curFrequency = $GET(^tempWords(key))
		   set allFrequency = $GET(^documentFrequency(key))
		   if allFrequency = "" {
			   set ^documentFrequency(key) = 1
		   } else {
			   set ^documentFrequency(key) = allFrequency + 1
		   }
		   if curFrequency > maxFrequency {
			   set maxFrequency = curFrequency
		   }
		   set termFrequency = termFrequency_key_","_curFrequency_" "
		   set key = $Order(^tempWords(key))
	   }
	   set ^tf(curID) = termFrequency
	   set ^maxtf(curID) = maxFrequency
	   kill ^tempWords
	   
	   // &sql(update data.SitePage set AdvancedKeywords = :enhancedKeywords where ID = :ID)
    }
    &sql(close byalldata)
    
    &sql(declare byURL cursor for
	      select ID,URL
	      from Data.SitePage)
    &sql(open byURL)
    for {
	   &sql(fetch byURL into :curID,:curURL)
	   quit:(SQLCODE '= 0)
	   set termFrequency = $GET(^tf(curID))
	   set maxFrequency = $GET(^maxtf(curID))
	   set frequencyList = $LISTFROMSTRING(termFrequency, " ")
	   set documentTfIdf = ""
	   for i=1:1:$listlength(frequencyList)-1 {
		   set curGroup = $list(frequencyList,i)
		   set curWord = $PIECE(curGroup, ",", 1)
		   set curFrequency = $PIECE(curGroup, ",", 2)
		   set curDocumentFrequency = ^documentFrequency(curWord)
		   set curIdf = $ZLN(numberOfDocuments / curDocumentFrequency)
		   set curTf = (0.5 * curFrequency / maxFrequency) + 0.5
		   set curTfIdf = curTf * curIdf
		   set documentTfIdf = documentTfIdf_curWord_","_curTfIdf_" "
	   }
	   &sql(update data.SitePage set WordsTfIdf = :documentTfIdf where ID = :curID)
    }
    &sql(close byURL)
]]></Implementation>
</Method>

<Method name="FindKNearest">
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%Numeric,K:%Numeric</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	kill ^tfIdfTemp
	kill ^tfIdfOne
	kill ^dist
	set tfIdf = ""
	&sql(declare byIdTfIdf cursor for
	      select WordsTfIdf from Data.SitePage where ID = :id)
	
    &sql(open byIdTfIdf)
    for {
	   &sql(fetch byIdTfIdf into :myWordsTfIdf)
	   quit:(SQLCODE '= 0)
	   set tfIdf = myWordsTfIdf
    }
    &sql(close byIdTfIdf)
    
    set tfIdfListOne = $LISTFROMSTRING(tfIdf, " ")
    for i=1:1:$listlength(tfIdfListOne)-1 {
	    set curGroupOne = $list(tfIdfListOne,i)
	    set curWordOne = $PIECE(curGroupOne, ",", 1)
	    set curTfIdfOne = $PIECE(curGroupOne, ",", 2)
	    set ^tfIdfOne(curWordOne) = curTfIdfOne
	}
    
	&sql(declare byTfIdfAll cursor for
	      select ID,WordsTfIdf from Data.SitePage)
    &sql(open byTfIdfAll)
    for {
	   &sql(fetch byTfIdfAll into :ID,:WordsTfIdf)
	   quit:(SQLCODE '= 0)
	   set key = $Order(^tfIdfOne(""))
	   while key '= "" {
		   set ^tfIdfTemp(key) = $GET(^tfIdfOne(key))
		   set key = $Order(^tfIdfOne(key))
	   }
	   set tfIdfListTwo = $LISTFROMSTRING(WordsTfIdf, " ")
	   for i=1:1:$listlength(tfIdfListTwo)-1 {
		   set curGroupTwo = $list(tfIdfListTwo,i)
		   set curWordTwo = $PIECE(curGroupTwo, ",", 1)
		   set curTfIdfTwo = $PIECE(curGroupTwo, ",", 2)
		   set wasTfIdf = $GET(^tfIdfTemp(curWordTwo))
		   if wasTfIdf = "" {
			   set ^tfIdfTemp(curWordTwo) = curTfIdfTwo
		   } else {
			   set ^tfIdfTemp(curWordTwo) = wasTfIdf - curTfIdfTwo
		   }
	   }
	   set distance = 0
	   set key = $Order(^tfIdfTemp(""))
	   while key '= "" {
		   set TfIdfDiff = $GET(^tfIdfTemp(key))
		   set distance = distance + (TfIdfDiff * TfIdfDiff)
		   set key = $Order(^tfIdfTemp(key))
	   }
	   set ^dist($ZSQR(distance)) = ID
	   kill ^tfIdfTemp
    }
    &sql(close byTfIdfAll)
    
    set result = ""
    set key = $Order(^dist(""))
    for i=1:1:K {
	    quit:(key = "")
	    set result = result_^dist(key)_","_key_" "
	    set key = $Order(^dist(key))
	}
	kill ^dist
	return result
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Experimental.PageAnalyzerD</DataLocation>
<DefaultData>PageAnalyzerDefaultData</DefaultData>
<IdLocation>^Experimental.PageAnalyzerD</IdLocation>
<IndexLocation>^Experimental.PageAnalyzerI</IndexLocation>
<StreamLocation>^Experimental.PageAnalyzerS</StreamLocation>
<Data name="PageAnalyzerDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Project name="Experimental" LastModified="2015-11-20 19:38:05.636595">
  <Items>
    <ProjectItem name="Experimental.PageAnalyzer" type="CLS"></ProjectItem>
    <ProjectItem name="Experimental.TextAnalyzer" type="CLS"></ProjectItem>
    <ProjectItem name="Experimental.QualityCounter" type="CLS"></ProjectItem>
  </Items>
</Project>


<Class name="Experimental.QualityCounter">
<Super>%Persistent</Super>
<TimeChanged>63876,66943.960137</TimeChanged>
<TimeCreated>63876,62764.088827</TimeCreated>

<Method name="GetCategory">
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%Numeric</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set result = ""
	&sql(declare byid cursor for
	      select Category from RecipeSearch_Data.SitePage where ID = :id)
	      
	&sql(open byid)
    for {
	   &sql(fetch byid into :myCategory)
	   quit:(SQLCODE '= 0)
	   set result = myCategory
    }
    &sql(close byid)
    return result
]]></Implementation>
</Method>

<Method name="GetDistance">
<ClassMethod>1</ClassMethod>
<FormalSpec>CategoryOne:%String,CategoryTwo:%String</FormalSpec>
<ReturnType>%Numeric</ReturnType>
<Implementation><![CDATA[
	set categoryListOne = $LISTFROMSTRING(CategoryOne, ".")
	set categoryOneLength = $LISTLENGTH(categoryListOne) - 1
	set categoryListTwo = $LISTFROMSTRING(CategoryTwo, ".")
	set categoryTwoLength = $LISTLENGTH(categoryListTwo) - 1
	set minLength = categoryOneLength + categoryTwoLength
	set index = 1
	for {
		quit:(index > categoryOneLength)
		quit:(index > categoryTwoLength)
		set currentCategoryOne = $LIST(categoryListOne, index)
		set currentCategoryTwo = $LIST(categoryListTwo, index)
		quit:(currentCategoryOne '= currentCategoryTwo)
		set minLength = minLength - 2
		set index = index + 1
	}
	
	return minLength
]]></Implementation>
</Method>

<Method name="CountQuality">
<ClassMethod>1</ClassMethod>
<ReturnType>%Numeric</ReturnType>
<Implementation><![CDATA[
	set result = 0
	&sql(declare bynearest cursor for
	      select RecipeId, SimilarRecipeId
          from RecipeSearch_Data_RecipeData.NearestResult)
    &sql(open bynearest)
    for {
	   &sql(fetch bynearest into :firstRecipeID,:secondRecipeID)
	   quit:(SQLCODE '= 0)
	   set categoryOne = ##class(Experimental.QualityCounter).GetCategory(firstRecipeID)
	   set categoryTwo = ##class(Experimental.QualityCounter).GetCategory(secondRecipeID)
	   set curDistance = ##class(Experimental.QualityCounter).GetDistance(categoryOne, categoryTwo)
	   if (curDistance < 0) {
		   set curDistance = 0
	   }
	   set result = result + curDistance
    }
    &sql(close bynearest)
    
    return result
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Experimental.QualityCounterD</DataLocation>
<DefaultData>QualityCounterDefaultData</DefaultData>
<IdLocation>^Experimental.QualityCounterD</IdLocation>
<IndexLocation>^Experimental.QualityCounterI</IndexLocation>
<StreamLocation>^Experimental.QualityCounterS</StreamLocation>
<Data name="QualityCounterDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Experimental.TextAnalyzer">
<Super>%Persistent</Super>
<TimeChanged>63654,66567.207028</TimeChanged>
<TimeCreated>63612,49650.300759</TimeCreated>

<Method name="GetEntitiesInText">
<ClassMethod>1</ClassMethod>
<FormalSpec>text:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#Include %IKPublic
	
	set cfgname = "Russian"
	if ##class(%iKnow.Configuration).Exists(cfgname) {
       set cfg=##class(%iKnow.Configuration).Open(cfgname)
    } else {
	   set cfg=##class(%iKnow.Configuration).%New(cfgname,0,$LISTBUILD("ru"),"",1)
	   set cfg.StemmingConfig = "DEFAULT"
	   do cfg.%Save()
	}

    set dname = "RecipesAnalyzer"
    if (##class(%iKnow.Domain).Exists(dname)) {
	    set domoref=##class(%iKnow.Domain).Open(dname)
        set stat=domoref.DropData()
        if 'stat {
           write "DropData error ",$System.Status.DisplayError(stat)
           quit
        }
    } else {
        set domoref=##class(%iKnow.Domain).%New(dname)
        do domoref.SetParameter($$$IKPSTEMMING,1) 
        do domoref.SetParameter($$$IKPDEFAULTCONFIG,cfgname)
        do domoref.%Save()
    }
       
    set domId=domoref.Id
    
    set stemmer = ##class(%iKnow.Stemming.TextStemmer).%New("ru")
	set stemmedText = ##class(Experimental.TextAnalyzer).StemText(text)
             
    set myloader = ##class(%iKnow.Source.Loader).%New(domId)
    do myloader.BufferSource("ref", stemmedText)
    do myloader.ProcessBuffer()
       
    do ##class(%iKnow.Queries.EntityAPI).GetTop(.result,domId,1,50)
                 
    set i=1
    set result = ""
    while $data(result(i)) {
       set liststr = $listtostring(result(i))
       write liststr,!
       set str = $Piece(liststr, ",", 2)
       set result = str_" "_result
       set i=i+1
    }
    return result
]]></Implementation>
</Method>

<Method name="StemText">
<ClassMethod>1</ClassMethod>
<FormalSpec>text:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set stemmer = ##class(%iKnow.Stemming.TextStemmer).%New("ru")
	return stemmer.StemWord(text)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^Experimental.TextAnalyzerD</DataLocation>
<DefaultData>TextAnalyzerDefaultData</DefaultData>
<IdLocation>^Experimental.TextAnalyzerD</IdLocation>
<IndexLocation>^Experimental.TextAnalyzerI</IndexLocation>
<StreamLocation>^Experimental.TextAnalyzerS</StreamLocation>
<Data name="TextAnalyzerDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
