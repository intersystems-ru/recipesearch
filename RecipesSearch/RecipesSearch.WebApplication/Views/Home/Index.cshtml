@{
    ViewBag.Title = "Search";
}
@using RecipesSearch.WebApplication.Enums
@model RecipesSearch.WebApplication.ViewModels.SearchViewModel

@{
    Func<ResultsViews, string> getTabActiveClass = (view) =>
    {
        const string activeClass = "active";
        if (Model.CurrentPage != 1)
        {
            return view == ResultsViews.List ? activeClass : String.Empty;
        }
        return Model.DefaultResultView == view ? activeClass : String.Empty;
    };
}

<div class="row search-box">
    <div class="col-md-8">
        <form id="searchForm" role="search" action="/Home/Index">
            <div class="form-group">
                <input id="searchInput"
                       type="text"
                       autocomplete="off"
                       name="query"
                       class="form-control"
                       placeholder="Search"
                       value="@ViewBag.SearchQuery">
            </div>
            <button type="submit" class="btn btn-info glyphicon glyphicon-search"></button>
        </form>
    </div>
</div>

<div class="search-results">
    <div class="container-fluid results-list">
        @if (Model == null)
        {
            <div class="row">
                <div class="col-md-8">
                    <div class="empty-placeholder">
                        Type to search for recipes
                    </div>
                </div>
            </div>
            return;
        }

        @if (Model.ResultItems.Count == 0)
        {
            <div class="row no-results-holder">
                <div class="col-md-6">
                    @if (Model.SpellcheckingEnabled && Model.SpellcheckedQuery.ToLowerInvariant().Trim() != Model.CurrentQuery.Replace(".", "").ToLowerInvariant().Trim())
                    {
                        <div class="row">
                            <div class="col-md-8">
                                <div class="spellcheck-holder">
                                    <p class="title">Try results for: <a href="/Home/Index?query=@Model.SpellcheckedQuery">@Model.SpellcheckedQuery</a></p>
                                </div>
                            </div>
                        </div>
                    }
                    <div class="alert alert-warning" role="alert">
                        There are no results for this query :(
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="row results-count">
                <div class="col-md-8">
                    <span>Total count: @Model.TotalCount</span>
                </div>
            </div>
            if (Model.SpellcheckingEnabled && Model.SpellcheckedQuery.ToLowerInvariant().Trim() != Model.CurrentQuery.ToLowerInvariant().Trim())
            {
                <div class="row">
                    <div class="col-md-8">
                        <div class="spellcheck-holder suggest">
                            <p class="title">Showing results for: <a href="/Home/Index?query=@Model.SpellcheckedQuery">@Model.SpellcheckedQuery</a></p>
                            <p class="sub-title">Search instead for: <a href="/Home/Index?exactMatch=true&query=@Model.CurrentQuery">@Model.CurrentQuery</a></p>
                        </div>
                    </div>
                </div>
            }
            <div role="tabpanel" class="results-tab">
                @*<ul class="nav nav-tabs pinned-recipes" role="tablist"></ul>*@
                <ul class="nav nav-tabs" role="tablist">
                    <li class="tabs-separator"></li>
                    <li role="presentation" class="@getTabActiveClass(ResultsViews.Graph) graph-view-tab">
                        <a href="#graph" role="tab" data-toggle="tab">Graph view</a>
                    </li>
                    <li role="presentation" class="@getTabActiveClass(ResultsViews.List)">
                        <a href="#list" role="tab" data-toggle="tab">List view</a>
                    </li>
                </ul>
                <div class="tab-content">
                    <div role="tabpanel" class="tab-pane @getTabActiveClass(ResultsViews.List)" id="list">
                        @for (var i = 0; i < Model.ResultItems.Count; ++i)
                        {
                            var searchResult = Model.ResultItems[i];
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="result-item" id="recipe_@i" data-id="@searchResult.Id">
                                        <h4 class="recipe-name">          
                                            <i class="glyphicon glyphicon-pushpin pin-icon" data-id="@searchResult.Id"></i>
                                            <i class="glyphicon glyphicon-screenshot show-on-graph" style="display: none" data-id="@searchResult.Id"></i>
                                            @searchResult.Name
                                        </h4>
                                        @Html.Partial("_ResultItem", searchResult)
                                    </div>
                                    <a href="#" data-expander="recipe_@i" data-show-text="More" data-hide-text="Less" class="expander">More</a>
                                    <a href="#" data-expander="similar_@i" data-show-text="Show Similar" data-hide-text="Hide Similar" class="expander">Show Similar</a>

                                    @if (searchResult.SimilarResults.Any())
                                    {
                                        <div id="similar_@i" class="similar-results-holder">
                                            <span class="similar-label">Similar results:</span>
                                            <ul class="similar">
                                                @for (var j = 0; j < searchResult.SimilarResults.Count; ++j)
                                                {
                                                    <li>
                                                        <div class="result-item-similar" id="recipe_@(i + "_" + j)">
                                                            <h4 class="recipe-name">
                                                                <i class="glyphicon glyphicon-pushpin pin-icon" data-id="@searchResult.SimilarResults[j].Id"></i>
                                                                <span data-expander="recipe_@(i + "_" + j)">@searchResult.SimilarResults[j].Name</span>
                                                            </h4>
                                                            @Html.Partial("_ResultItem", searchResult.SimilarResults[j])
                                                        </div>
                                                    </li>
                                                }
                                            </ul>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                        <div class="row">
                            <div class="col-md-12">
                                @if (Model.TotalCount > Model.ResultsOnPage)
                                {
                                    <div class="pagination-holder"></div>
                                }
                                @if (Model.TotalCount > 5)
                                {
                                    <a href="#" class="back-to-top">Back to top</a>
                                }
                            </div>
                        </div>
                    </div>
                    <div role="tabpanel" class="tab-pane @getTabActiveClass(ResultsViews.Graph) loading" id="graph">
                        <div id="graphContainer"></div>
                        <div class="loading-holder">
                            <div class="loading-info">
                                <i class="loader"></i>
                                <div class="note">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
        @section Scripts {
            <script>
                var paginationData = {
                    resultsOnPage: @Model.ResultsOnPage,
                    totalCount: @Model.TotalCount,
                    currentPage: @Model.CurrentPage,
                    currentQuery: '@Model.CurrentQuery'
                };
            </script>
        }
    </div>
</div>