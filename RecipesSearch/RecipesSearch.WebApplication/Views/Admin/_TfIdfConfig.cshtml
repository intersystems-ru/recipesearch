@model RecipesSearch.WebApplication.ViewModels.TfIdfConfigViewModel
@{
    var tfBuildersList = Model.AvailableTfBuilders
        .Select(name => new SelectListItem { Text = name, Value = name })
        .ToList();

    var idfBuildersList = Model.AvailableIdfBuilders
        .Select(name => new SelectListItem { Text = name, Value = name })
        .ToList();

    var clustersBuildersList = Model.AvailableClustersBuilders
        .Select(name => new SelectListItem { Text = name, Value = name })
        .ToList();
}
@using (Html.BeginForm("UpdateTfIdfConfig", "Admin", FormMethod.Post, new { id = "updateConfigForm" }))
{
    @Html.HiddenFor(model => model.Id)
    @Html.HiddenFor(model => model.LastUsedTfBuilder)
    @Html.HiddenFor(model => model.LastUsedIdfBuilder)
    <div class="form-group">
        @Html.LabelFor(model => model.TfBuilderName)
        @Html.DropDownListFor(
                model => model.TfBuilderName,
                tfBuildersList,
                new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.TfBuilderName)
        @if (!String.IsNullOrEmpty(Model.LastUsedTfBuilder))
        {
            <div class="page-stat">Last used TF builder: @Model.LastUsedTfBuilder</div>
        }
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.IdfBuilderName)
        @Html.DropDownListFor(
            model => model.IdfBuilderName,
            idfBuildersList,
            new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.IdfBuilderName)
        @if (!String.IsNullOrEmpty(Model.LastUsedIdfBuilder))
        {
            <div class="page-stat">Last used IDF builder: @Model.LastUsedIdfBuilder</div>
        }
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.SimilarResultsCount)
        @Html.TextBoxFor(model => model.SimilarResultsCount, new {@class = "form-control"})
        @Html.ValidationMessageFor(model => model.SimilarResultsCount)
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.ClustersBuilder)
        @Html.DropDownListFor(
            model => model.ClustersBuilder,
            clustersBuildersList,
            new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.ClustersBuilder)
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.ClusteringParameters)
        @Html.TextAreaFor(model => model.ClusteringParameters, new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.ClusteringParameters)
        <div>
            <h5>Page rank:</h5>
            <ul>
                <li>threshold: [int]</li>
            </ul>
            <h5>Spanning tree:</h5>
            <ul>
                <li>threshold: [int]</li>
            </ul>
        </div>
    </div>
    <div class="right">
        <input type="submit" class="btn btn-link" value="Update builders config" />
    </div>
}