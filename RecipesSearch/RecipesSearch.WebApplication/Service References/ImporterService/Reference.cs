//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RecipesSearch.WebApplication.ImporterService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ImporterService.IImporterService")]
    public interface IImporterService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImporterService/ImportAllSites", ReplyAction="http://tempuri.org/IImporterService/ImportAllSitesResponse")]
        void ImportAllSites();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImporterService/ImportAllSites", ReplyAction="http://tempuri.org/IImporterService/ImportAllSitesResponse")]
        System.Threading.Tasks.Task ImportAllSitesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImporterService/ImportSites", ReplyAction="http://tempuri.org/IImporterService/ImportSitesResponse")]
        void ImportSites(RecipesSearch.Data.Models.SiteToCrawl[] sitesToCrawl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImporterService/ImportSites", ReplyAction="http://tempuri.org/IImporterService/ImportSitesResponse")]
        System.Threading.Tasks.Task ImportSitesAsync(RecipesSearch.Data.Models.SiteToCrawl[] sitesToCrawl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImporterService/RemoveFromQueue", ReplyAction="http://tempuri.org/IImporterService/RemoveFromQueueResponse")]
        bool RemoveFromQueue(int siteId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImporterService/RemoveFromQueue", ReplyAction="http://tempuri.org/IImporterService/RemoveFromQueueResponse")]
        System.Threading.Tasks.Task<bool> RemoveFromQueueAsync(int siteId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImporterService/StopImporting", ReplyAction="http://tempuri.org/IImporterService/StopImportingResponse")]
        void StopImporting();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImporterService/StopImporting", ReplyAction="http://tempuri.org/IImporterService/StopImportingResponse")]
        System.Threading.Tasks.Task StopImportingAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImporterService/StopCurrentSiteImporting", ReplyAction="http://tempuri.org/IImporterService/StopCurrentSiteImportingResponse")]
        void StopCurrentSiteImporting();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImporterService/StopCurrentSiteImporting", ReplyAction="http://tempuri.org/IImporterService/StopCurrentSiteImportingResponse")]
        System.Threading.Tasks.Task StopCurrentSiteImportingAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImporterService/IsImportingInProgress", ReplyAction="http://tempuri.org/IImporterService/IsImportingInProgressResponse")]
        bool IsImportingInProgress();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImporterService/IsImportingInProgress", ReplyAction="http://tempuri.org/IImporterService/IsImportingInProgressResponse")]
        System.Threading.Tasks.Task<bool> IsImportingInProgressAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImporterService/SitesQueue", ReplyAction="http://tempuri.org/IImporterService/SitesQueueResponse")]
        RecipesSearch.Data.Models.SiteToCrawl[] SitesQueue();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImporterService/SitesQueue", ReplyAction="http://tempuri.org/IImporterService/SitesQueueResponse")]
        System.Threading.Tasks.Task<RecipesSearch.Data.Models.SiteToCrawl[]> SitesQueueAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImporterService/CrawledPages", ReplyAction="http://tempuri.org/IImporterService/CrawledPagesResponse")]
        int CrawledPages();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImporterService/CrawledPages", ReplyAction="http://tempuri.org/IImporterService/CrawledPagesResponse")]
        System.Threading.Tasks.Task<int> CrawledPagesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IImporterServiceChannel : global::RecipesSearch.WebApplication.ImporterService.IImporterService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ImporterServiceClient : System.ServiceModel.ClientBase<global::RecipesSearch.WebApplication.ImporterService.IImporterService>, global::RecipesSearch.WebApplication.ImporterService.IImporterService {
        
        public ImporterServiceClient() {
        }
        
        public ImporterServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ImporterServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ImporterServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ImporterServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void ImportAllSites() {
            base.Channel.ImportAllSites();
        }
        
        public System.Threading.Tasks.Task ImportAllSitesAsync() {
            return base.Channel.ImportAllSitesAsync();
        }
        
        public void ImportSites(RecipesSearch.Data.Models.SiteToCrawl[] sitesToCrawl) {
            base.Channel.ImportSites(sitesToCrawl);
        }
        
        public System.Threading.Tasks.Task ImportSitesAsync(RecipesSearch.Data.Models.SiteToCrawl[] sitesToCrawl) {
            return base.Channel.ImportSitesAsync(sitesToCrawl);
        }
        
        public bool RemoveFromQueue(int siteId) {
            return base.Channel.RemoveFromQueue(siteId);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveFromQueueAsync(int siteId) {
            return base.Channel.RemoveFromQueueAsync(siteId);
        }
        
        public void StopImporting() {
            base.Channel.StopImporting();
        }
        
        public System.Threading.Tasks.Task StopImportingAsync() {
            return base.Channel.StopImportingAsync();
        }
        
        public void StopCurrentSiteImporting() {
            base.Channel.StopCurrentSiteImporting();
        }
        
        public System.Threading.Tasks.Task StopCurrentSiteImportingAsync() {
            return base.Channel.StopCurrentSiteImportingAsync();
        }
        
        public bool IsImportingInProgress() {
            return base.Channel.IsImportingInProgress();
        }
        
        public System.Threading.Tasks.Task<bool> IsImportingInProgressAsync() {
            return base.Channel.IsImportingInProgressAsync();
        }
        
        public RecipesSearch.Data.Models.SiteToCrawl[] SitesQueue() {
            return base.Channel.SitesQueue();
        }
        
        public System.Threading.Tasks.Task<RecipesSearch.Data.Models.SiteToCrawl[]> SitesQueueAsync() {
            return base.Channel.SitesQueueAsync();
        }
        
        public int CrawledPages() {
            return base.Channel.CrawledPages();
        }
        
        public System.Threading.Tasks.Task<int> CrawledPagesAsync() {
            return base.Channel.CrawledPagesAsync();
        }
    }
}
